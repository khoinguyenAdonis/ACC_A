
Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c4  080079c4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080079c4  080079c4  000179c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079cc  080079cc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d0  080079d0  000179d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080079d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000468  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f1ac  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023be  00000000  00000000  0002f28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f38  00000000  00000000  00031650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000be9  00000000  00000000  00032588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022d55  00000000  00000000  00033171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012599  00000000  00000000  00055ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d891a  00000000  00000000  0006845f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046cc  00000000  00000000  00140d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00145448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078b8 	.word	0x080078b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080078b8 	.word	0x080078b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b970 	b.w	8000e34 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	460d      	mov	r5, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	460f      	mov	r7, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4694      	mov	ip, r2
 8000b80:	d965      	bls.n	8000c4e <__udivmoddi4+0xe2>
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	b143      	cbz	r3, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b8c:	f1c3 0220 	rsb	r2, r3, #32
 8000b90:	409f      	lsls	r7, r3
 8000b92:	fa20 f202 	lsr.w	r2, r0, r2
 8000b96:	4317      	orrs	r7, r2
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b9e:	fa1f f58c 	uxth.w	r5, ip
 8000ba2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ba6:	0c22      	lsrs	r2, r4, #16
 8000ba8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb0:	fb01 f005 	mul.w	r0, r1, r5
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bbc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc0:	f080 811c 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	f240 8119 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a12      	subs	r2, r2, r0
 8000bd0:	b2a4      	uxth	r4, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bde:	fb00 f505 	mul.w	r5, r0, r5
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	d90a      	bls.n	8000bfc <__udivmoddi4+0x90>
 8000be6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x294>
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x294>
 8000bf8:	4464      	add	r4, ip
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c00:	1b64      	subs	r4, r4, r5
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11e      	cbz	r6, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40dc      	lsrs	r4, r3
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0xbc>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80ed 	beq.w	8000df6 <__udivmoddi4+0x28a>
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c22:	4608      	mov	r0, r1
 8000c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c28:	fab3 f183 	clz	r1, r3
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d149      	bne.n	8000cc4 <__udivmoddi4+0x158>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d302      	bcc.n	8000c3a <__udivmoddi4+0xce>
 8000c34:	4282      	cmp	r2, r0
 8000c36:	f200 80f8 	bhi.w	8000e2a <__udivmoddi4+0x2be>
 8000c3a:	1a84      	subs	r4, r0, r2
 8000c3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c40:	2001      	movs	r0, #1
 8000c42:	4617      	mov	r7, r2
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d0e2      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	e9c6 4700 	strd	r4, r7, [r6]
 8000c4c:	e7df      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xe6>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f382 	clz	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8090 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c62:	fa1f fe8c 	uxth.w	lr, ip
 8000c66:	2101      	movs	r1, #1
 8000c68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c70:	0c22      	lsrs	r2, r4, #16
 8000c72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c76:	fb0e f005 	mul.w	r0, lr, r5
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c82:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	f200 80cb 	bhi.w	8000e24 <__udivmoddi4+0x2b8>
 8000c8e:	4645      	mov	r5, r8
 8000c90:	1a12      	subs	r2, r2, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c98:	fb07 2210 	mls	r2, r7, r0, r2
 8000c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	45a6      	cmp	lr, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x14e>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x14c>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	f200 80bb 	bhi.w	8000e2e <__udivmoddi4+0x2c2>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	eba4 040e 	sub.w	r4, r4, lr
 8000cbe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc2:	e79f      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cc4:	f1c1 0720 	rsb	r7, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cda:	40fd      	lsrs	r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	4323      	orrs	r3, r4
 8000ce2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	fb09 5518 	mls	r5, r9, r8, r5
 8000cee:	0c1c      	lsrs	r4, r3, #16
 8000cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	fa00 f001 	lsl.w	r0, r0, r1
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d0c:	f080 8088 	bcs.w	8000e20 <__udivmoddi4+0x2b4>
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	f240 8085 	bls.w	8000e20 <__udivmoddi4+0x2b4>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	4464      	add	r4, ip
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	b29d      	uxth	r5, r3
 8000d20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d24:	fb09 4413 	mls	r4, r9, r3, r4
 8000d28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d3c:	d26c      	bcs.n	8000e18 <__udivmoddi4+0x2ac>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	d96a      	bls.n	8000e18 <__udivmoddi4+0x2ac>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	4464      	add	r4, ip
 8000d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	46c8      	mov	r8, r9
 8000d56:	46ae      	mov	lr, r5
 8000d58:	d356      	bcc.n	8000e08 <__udivmoddi4+0x29c>
 8000d5a:	d053      	beq.n	8000e04 <__udivmoddi4+0x298>
 8000d5c:	b156      	cbz	r6, 8000d74 <__udivmoddi4+0x208>
 8000d5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d62:	eb64 040e 	sbc.w	r4, r4, lr
 8000d66:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6a:	40ca      	lsrs	r2, r1
 8000d6c:	40cc      	lsrs	r4, r1
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	e9c6 7400 	strd	r7, r4, [r6]
 8000d74:	4618      	mov	r0, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	f1c3 0120 	rsb	r1, r3, #32
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	fa20 f201 	lsr.w	r2, r0, r1
 8000d88:	fa25 f101 	lsr.w	r1, r5, r1
 8000d8c:	409d      	lsls	r5, r3
 8000d8e:	432a      	orrs	r2, r5
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000da0:	0c11      	lsrs	r1, r2, #16
 8000da2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000da6:	fb00 f50e 	mul.w	r5, r0, lr
 8000daa:	428d      	cmp	r5, r1
 8000dac:	fa04 f403 	lsl.w	r4, r4, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x258>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dba:	d22f      	bcs.n	8000e1c <__udivmoddi4+0x2b0>
 8000dbc:	428d      	cmp	r5, r1
 8000dbe:	d92d      	bls.n	8000e1c <__udivmoddi4+0x2b0>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dcc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dd8:	4291      	cmp	r1, r2
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x282>
 8000ddc:	eb1c 0202 	adds.w	r2, ip, r2
 8000de0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de4:	d216      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000de6:	4291      	cmp	r1, r2
 8000de8:	d914      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000dea:	3d02      	subs	r5, #2
 8000dec:	4462      	add	r2, ip
 8000dee:	1a52      	subs	r2, r2, r1
 8000df0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df4:	e738      	b.n	8000c68 <__udivmoddi4+0xfc>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	e6e6      	b.n	8000bce <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x90>
 8000e04:	4548      	cmp	r0, r9
 8000e06:	d2a9      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e08:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e10:	3b01      	subs	r3, #1
 8000e12:	e7a3      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e14:	4645      	mov	r5, r8
 8000e16:	e7ea      	b.n	8000dee <__udivmoddi4+0x282>
 8000e18:	462b      	mov	r3, r5
 8000e1a:	e794      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	e7d1      	b.n	8000dc4 <__udivmoddi4+0x258>
 8000e20:	46d0      	mov	r8, sl
 8000e22:	e77b      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e24:	3d02      	subs	r5, #2
 8000e26:	4462      	add	r2, ip
 8000e28:	e732      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e70a      	b.n	8000c44 <__udivmoddi4+0xd8>
 8000e2e:	4464      	add	r4, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e742      	b.n	8000cba <__udivmoddi4+0x14e>

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PIN GPIO_PIN_8
#define TRIG_PORT GPIOE


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7f1b      	ldrb	r3, [r3, #28]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 8083 	bne.w	8000f50 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000e4a:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d11a      	bne.n	8000e88 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e52:	2100      	movs	r1, #0
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f005 fb5f 	bl	8006518 <HAL_TIM_ReadCapturedValue>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a41      	ldr	r2, [pc, #260]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e5e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a1a      	ldr	r2, [r3, #32]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 020a 	bic.w	r2, r2, #10
 8000e74:	621a      	str	r2, [r3, #32]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a1a      	ldr	r2, [r3, #32]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0202 	orr.w	r2, r2, #2
 8000e84:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000e86:	e063      	b.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d15f      	bne.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e90:	2100      	movs	r1, #0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f005 fb40 	bl	8006518 <HAL_TIM_ReadCapturedValue>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a33      	ldr	r2, [pc, #204]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e9c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d907      	bls.n	8000ec2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	4a2b      	ldr	r2, [pc, #172]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e00f      	b.n	8000ee2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d909      	bls.n	8000ee2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000edc:	33ff      	adds	r3, #255	; 0xff
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ee0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fb04 	bl	80004f4 <__aeabi_ui2d>
 8000eec:	a31a      	add	r3, pc, #104	; (adr r3, 8000f58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef2:	f7ff fb79 	bl	80005e8 <__aeabi_dmul>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f06:	f7ff fc99 	bl	800083c <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fda3 	bl	8000a5c <__aeabi_d2uiz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f1c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a1a      	ldr	r2, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 020a 	bic.w	r2, r2, #10
 8000f32:	621a      	str	r2, [r3, #32]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a12      	ldr	r2, [r2, #32]
 8000f3e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0202 	bic.w	r2, r2, #2
 8000f4e:	60da      	str	r2, [r3, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	b020c49c 	.word	0xb020c49c
 8000f5c:	3fa16872 	.word	0x3fa16872
 8000f60:	20000094 	.word	0x20000094
 8000f64:	20000088 	.word	0x20000088
 8000f68:	2000008c 	.word	0x2000008c
 8000f6c:	20000090 	.word	0x20000090
 8000f70:	20000095 	.word	0x20000095
 8000f74:	20000194 	.word	0x20000194

08000f78 <delay>:

void delay(uint16_t time){
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <delay+0x30>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000f8a:	bf00      	nop
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <delay+0x30>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f9      	bcc.n	8000f8c <delay+0x14>
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000194 	.word	0x20000194

08000fac <HCSR04_GetDis>:

uint8_t HCSR04_GetDis (void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <HCSR04_GetDis+0x3c>)
 8000fb8:	f003 f99e 	bl	80042f8 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f7ff ffdb 	bl	8000f78 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc8:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <HCSR04_GetDis+0x3c>)
 8000fca:	f003 f995 	bl	80042f8 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HCSR04_GetDis+0x40>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HCSR04_GetDis+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0202 	orr.w	r2, r2, #2
 8000fdc:	60da      	str	r2, [r3, #12]
	return Distance;
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HCSR04_GetDis+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	20000194 	.word	0x20000194
 8000ff0:	20000095 	.word	0x20000095

08000ff4 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E
// change this according to ur setup - DATASHEET

void lcd_send_cmd (char cmd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f023 030f 	bic.w	r3, r3, #15
 8001004:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f043 030c 	orr.w	r3, r3, #12
 8001012:	b2db      	uxtb	r3, r3
 8001014:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	b2db      	uxtb	r3, r3
 800101e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	f043 030c 	orr.w	r3, r3, #12
 8001026:	b2db      	uxtb	r3, r3
 8001028:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	b2db      	uxtb	r3, r3
 8001032:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4,100);
 8001034:	f107 0208 	add.w	r2, r7, #8
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2304      	movs	r3, #4
 800103e:	214e      	movs	r1, #78	; 0x4e
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <lcd_send_cmd+0x5c>)
 8001042:	f003 fae9 	bl	8004618 <HAL_I2C_Master_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000140 	.word	0x20000140

08001054 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af02      	add	r7, sp, #8
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f023 030f 	bic.w	r3, r3, #15
 8001064:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	f043 030d 	orr.w	r3, r3, #13
 8001072:	b2db      	uxtb	r3, r3
 8001074:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f043 0309 	orr.w	r3, r3, #9
 800107c:	b2db      	uxtb	r3, r3
 800107e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	f043 030d 	orr.w	r3, r3, #13
 8001086:	b2db      	uxtb	r3, r3
 8001088:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	f043 0309 	orr.w	r3, r3, #9
 8001090:	b2db      	uxtb	r3, r3
 8001092:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4,100);
 8001094:	f107 0208 	add.w	r2, r7, #8
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2304      	movs	r3, #4
 800109e:	214e      	movs	r1, #78	; 0x4e
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <lcd_send_data+0x5c>)
 80010a2:	f003 fab9 	bl	8004618 <HAL_I2C_Master_Transmit>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000140 	.word	0x20000140

080010b4 <lcd_clear>:

void lcd_clear (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80010ba:	2080      	movs	r0, #128	; 0x80
 80010bc:	f7ff ff9a 	bl	8000ff4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	e005      	b.n	80010d2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80010c6:	2020      	movs	r0, #32
 80010c8:	f7ff ffc4 	bl	8001054 <lcd_send_data>
	for (int i=0; i<70; i++)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3301      	adds	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b45      	cmp	r3, #69	; 0x45
 80010d6:	ddf6      	ble.n	80010c6 <lcd_clear+0x12>
	}
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
    switch (row)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d81f      	bhi.n	8001134 <lcd_put_cur+0x50>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <lcd_put_cur+0x18>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	0800110d 	.word	0x0800110d
 8001100:	08001117 	.word	0x08001117
 8001104:	08001121 	.word	0x08001121
 8001108:	0800112b 	.word	0x0800112b
    {
        case 0:
            col |= 0x80;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001112:	603b      	str	r3, [r7, #0]
            break;
 8001114:	e00e      	b.n	8001134 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800111c:	603b      	str	r3, [r7, #0]
            break;
 800111e:	e009      	b.n	8001134 <lcd_put_cur+0x50>
        case 2:
            col |= 0x94;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 8001126:	603b      	str	r3, [r7, #0]
            break;
 8001128:	e004      	b.n	8001134 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD4;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 8001130:	603b      	str	r3, [r7, #0]
            break;
 8001132:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5b 	bl	8000ff4 <lcd_send_cmd>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop

08001148 <lcd_init>:



void lcd_init (void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800114c:	2032      	movs	r0, #50	; 0x32
 800114e:	f001 fe71 	bl	8002e34 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001152:	2030      	movs	r0, #48	; 0x30
 8001154:	f7ff ff4e 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001158:	2005      	movs	r0, #5
 800115a:	f001 fe6b 	bl	8002e34 <HAL_Delay>
	lcd_send_cmd (0x30);
 800115e:	2030      	movs	r0, #48	; 0x30
 8001160:	f7ff ff48 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001164:	2001      	movs	r0, #1
 8001166:	f001 fe65 	bl	8002e34 <HAL_Delay>
	lcd_send_cmd (0x30);
 800116a:	2030      	movs	r0, #48	; 0x30
 800116c:	f7ff ff42 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(10);
 8001170:	200a      	movs	r0, #10
 8001172:	f001 fe5f 	bl	8002e34 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001176:	2020      	movs	r0, #32
 8001178:	f7ff ff3c 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(10);
 800117c:	200a      	movs	r0, #10
 800117e:	f001 fe59 	bl	8002e34 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001182:	2028      	movs	r0, #40	; 0x28
 8001184:	f7ff ff36 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f001 fe53 	bl	8002e34 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800118e:	2008      	movs	r0, #8
 8001190:	f7ff ff30 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f001 fe4d 	bl	8002e34 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff2a 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f001 fe47 	bl	8002e34 <HAL_Delay>
	HAL_Delay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f001 fe44 	bl	8002e34 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80011ac:	2006      	movs	r0, #6
 80011ae:	f7ff ff21 	bl	8000ff4 <lcd_send_cmd>
	HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f001 fe3e 	bl	8002e34 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80011b8:	200c      	movs	r0, #12
 80011ba:	f7ff ff1b 	bl	8000ff4 <lcd_send_cmd>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80011ca:	e006      	b.n	80011da <lcd_send_string+0x18>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff3d 	bl	8001054 <lcd_send_data>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f4      	bne.n	80011cc <lcd_send_string+0xa>
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	69b9      	ldr	r1, [r7, #24]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	1a8a      	subs	r2, r1, r2
 8001206:	fb03 f202 	mul.w	r2, r3, r2
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	fbb2 f2f3 	udiv	r2, r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4413      	add	r3, r2
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
	gas_val = MAP(value, 0, 4095, 0, 100); //gas_val = MAP(value, 1010, 3191, 0, 100);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_ADC_ConvCpltCallback+0x2c>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	f640 72ff 	movw	r2, #4095	; 0xfff
 800123a:	2100      	movs	r1, #0
 800123c:	f7ff ffd6 	bl	80011ec <MAP>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_ADC_ConvCpltCallback+0x30>)
 8001246:	801a      	strh	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000348 	.word	0x20000348
 8001254:	2000034e 	.word	0x2000034e

08001258 <convert_pid_to_crr>:

uint32_t convert_pid_to_crr(float pid_value)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	ed87 0a01 	vstr	s0, [r7, #4]

    float max_pid_value = 1500.0;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <convert_pid_to_crr+0x5c>)
 8001264:	60fb      	str	r3, [r7, #12]
    // Chuyển đổi giá trị PID thành giá trị CRR bằng cách sử dụng tỷ lệ tương ứng
    crr_value = (uint32_t)( fabs(pid_value / max_pid_value * max_crr_value));
 8001266:	edd7 6a01 	vldr	s13, [r7, #4]
 800126a:	ed97 7a03 	vldr	s14, [r7, #12]
 800126e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001272:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012b8 <convert_pid_to_crr+0x60>
 8001276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127a:	eef0 7ae7 	vabs.f32	s15, s15
 800127e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001282:	ee17 3a90 	vmov	r3, s15
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <convert_pid_to_crr+0x64>)
 800128a:	801a      	strh	r2, [r3, #0]

    // Giới hạn giá trị CRR trong phạm vi cho phép
    if (crr_value > max_crr_value) {
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <convert_pid_to_crr+0x64>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001294:	d306      	bcc.n	80012a4 <convert_pid_to_crr+0x4c>
      return  crr_value = max_crr_value;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <convert_pid_to_crr+0x64>)
 8001298:	f240 32e7 	movw	r2, #999	; 0x3e7
 800129c:	801a      	strh	r2, [r3, #0]
 800129e:	f240 33e7 	movw	r3, #999	; 0x3e7
 80012a2:	e001      	b.n	80012a8 <convert_pid_to_crr+0x50>
    } else if (crr_value < 0) {
        return crr_value = 0;
    }else   return crr_value;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <convert_pid_to_crr+0x64>)
 80012a6:	881b      	ldrh	r3, [r3, #0]

}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	44bb8000 	.word	0x44bb8000
 80012b8:	4479c000 	.word	0x4479c000
 80012bc:	20000354 	.word	0x20000354

080012c0 <calculate_pid>:

float calculate_pid(float setpoint, float actual_value)
{
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ca:	edc7 0a00 	vstr	s1, [r7]
  static float current_error = 0, previous_error = 0;

  static float integral = 0, derivative = 0;
  // Tính lỗi hiện tại
  current_error = setpoint - actual_value;
 80012ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80012d2:	edd7 7a00 	vldr	s15, [r7]
 80012d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <calculate_pid+0xf0>)
 80012dc:	edc3 7a00 	vstr	s15, [r3]


  // Tính phần tích phân của lỗi
  integral += current_error;
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <calculate_pid+0xf4>)
 80012e2:	ed93 7a00 	vldr	s14, [r3]
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <calculate_pid+0xf0>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <calculate_pid+0xf4>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]

  // Tính phần đạo hàm của lỗi
  derivative = current_error - previous_error;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <calculate_pid+0xf0>)
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <calculate_pid+0xf8>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <calculate_pid+0xfc>)
 8001308:	edc3 7a00 	vstr	s15, [r3]

  // Tính giá trị đi�?u khiển PID
  pid_value = Kp * current_error + Ki * integral + Kd * derivative;
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <calculate_pid+0xf0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f911 	bl	8000538 <__aeabi_f2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <calculate_pid+0x100>)
 800131c:	f7ff f964 	bl	80005e8 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4614      	mov	r4, r2
 8001326:	461d      	mov	r5, r3
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <calculate_pid+0xf4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f903 	bl	8000538 <__aeabi_f2d>
 8001332:	a31b      	add	r3, pc, #108	; (adr r3, 80013a0 <calculate_pid+0xe0>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff f956 	bl	80005e8 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7fe ff9a 	bl	800027c <__adddf3>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4614      	mov	r4, r2
 800134e:	461d      	mov	r5, r3
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <calculate_pid+0xfc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8ef 	bl	8000538 <__aeabi_f2d>
 800135a:	a313      	add	r3, pc, #76	; (adr r3, 80013a8 <calculate_pid+0xe8>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff f942 	bl	80005e8 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ff86 	bl	800027c <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb90 	bl	8000a9c <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <calculate_pid+0x104>)
 8001380:	6013      	str	r3, [r2, #0]

  // Cập nhật lỗi trước đó
  previous_error = current_error;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <calculate_pid+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <calculate_pid+0xf8>)
 8001388:	6013      	str	r3, [r2, #0]

  return pid_value;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <calculate_pid+0x104>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	ee07 3a90 	vmov	s15, r3
}
 8001392:	eeb0 0a67 	vmov.f32	s0, s15
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bdb0      	pop	{r4, r5, r7, pc}
 800139c:	f3af 8000 	nop.w
 80013a0:	9c38b04b 	.word	0x9c38b04b
 80013a4:	3f1cd5f9 	.word	0x3f1cd5f9
 80013a8:	cccccccd 	.word	0xcccccccd
 80013ac:	3ff8cccc 	.word	0x3ff8cccc
 80013b0:	20000368 	.word	0x20000368
 80013b4:	2000036c 	.word	0x2000036c
 80013b8:	20000370 	.word	0x20000370
 80013bc:	20000374 	.word	0x20000374
 80013c0:	40100000 	.word	0x40100000
 80013c4:	20000358 	.word	0x20000358

080013c8 <cruiseControl>:

void cruiseControl(controlValue *control,uint16_t RPM)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
	if (control->firstSet == false)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	791b      	ldrb	r3, [r3, #4]
 80013d8:	f083 0301 	eor.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d008      	beq.n	80013f4 <cruiseControl+0x2c>
	{
		control->Vset=RPM;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	887a      	ldrh	r2, [r7, #2]
 80013e6:	805a      	strh	r2, [r3, #2]
		speedSet = RPM;
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <cruiseControl+0x6c>)
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	8013      	strh	r3, [r2, #0]
		control->firstSet = true;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	711a      	strb	r2, [r3, #4]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, convert_pid_to_crr(calculate_pid(control->Vset,RPM)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	885b      	ldrh	r3, [r3, #2]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	ee07 3a10 	vmov	s14, r3
 8001406:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800140a:	eef0 0a47 	vmov.f32	s1, s14
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	f7ff ff55 	bl	80012c0 <calculate_pid>
 8001416:	eef0 7a40 	vmov.f32	s15, s0
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <cruiseControl+0x70>)
 800141c:	681c      	ldr	r4, [r3, #0]
 800141e:	eeb0 0a67 	vmov.f32	s0, s15
 8001422:	f7ff ff19 	bl	8001258 <convert_pid_to_crr>
 8001426:	4603      	mov	r3, r0
 8001428:	6363      	str	r3, [r4, #52]	; 0x34
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	2000000a 	.word	0x2000000a
 8001438:	20000224 	.word	0x20000224

0800143c <adaptiveCruiseControl>:

void adaptiveCruiseControl(uint16_t RPM, uint16_t deltaRPM, uint16_t RTDistance, controlValue *control)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	4603      	mov	r3, r0
 8001446:	81fb      	strh	r3, [r7, #14]
 8001448:	460b      	mov	r3, r1
 800144a:	81bb      	strh	r3, [r7, #12]
 800144c:	4613      	mov	r3, r2
 800144e:	817b      	strh	r3, [r7, #10]
	uint16_t v_Object;
	if (control->firstSet == false)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	f083 0301 	eor.w	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <adaptiveCruiseControl+0x34>
	{
		control->Vset=RPM;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	89fa      	ldrh	r2, [r7, #14]
 8001462:	805a      	strh	r2, [r3, #2]
		speedSet = RPM;
 8001464:	4a4a      	ldr	r2, [pc, #296]	; (8001590 <adaptiveCruiseControl+0x154>)
 8001466:	89fb      	ldrh	r3, [r7, #14]
 8001468:	8013      	strh	r3, [r2, #0]
		control->firstSet = true;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	711a      	strb	r2, [r3, #4]
	}
	if (RTDistance <= SENSING_ZONE)// step into the calculate zone
 8001470:	2332      	movs	r3, #50	; 0x32
 8001472:	b29b      	uxth	r3, r3
 8001474:	897a      	ldrh	r2, [r7, #10]
 8001476:	429a      	cmp	r2, r3
 8001478:	d867      	bhi.n	800154a <adaptiveCruiseControl+0x10e>
	{
        // Turn on calculate object speed
		HAL_TIM_Base_Start_IT(&htim4);
 800147a:	4846      	ldr	r0, [pc, #280]	; (8001594 <adaptiveCruiseControl+0x158>)
 800147c:	f004 f8a8 	bl	80055d0 <HAL_TIM_Base_Start_IT>
		if ( deltaRPM < 0 && fabs(deltaRPM) > RPM)
		{
			v_Object = 0;
		}else{
			v_Object = RPM + deltaRPM;
 8001480:	89fa      	ldrh	r2, [r7, #14]
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	82fb      	strh	r3, [r7, #22]
		}

		if (RTDistance >= ESTOP_DISTANCE + control->Dset + DECREASE_ZONE)               // run like CCS
 8001488:	897a      	ldrh	r2, [r7, #10]
 800148a:	2305      	movs	r3, #5
 800148c:	4619      	mov	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	440b      	add	r3, r1
 8001494:	2105      	movs	r1, #5
 8001496:	440b      	add	r3, r1
 8001498:	429a      	cmp	r2, r3
 800149a:	db1b      	blt.n	80014d4 <adaptiveCruiseControl+0x98>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, convert_pid_to_crr(calculate_pid(control->Vset,RPM)));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	885b      	ldrh	r3, [r3, #2]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a8:	89fb      	ldrh	r3, [r7, #14]
 80014aa:	ee07 3a10 	vmov	s14, r3
 80014ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80014b2:	eef0 0a47 	vmov.f32	s1, s14
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	f7ff ff01 	bl	80012c0 <calculate_pid>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	4b35      	ldr	r3, [pc, #212]	; (8001598 <adaptiveCruiseControl+0x15c>)
 80014c4:	681c      	ldr	r4, [r3, #0]
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	f7ff fec5 	bl	8001258 <convert_pid_to_crr>
 80014ce:	4603      	mov	r3, r0
 80014d0:	6363      	str	r3, [r4, #52]	; 0x34
	else
	{
		HAL_TIM_Base_Stop_IT(&htim4);       // turn of calculate speed run like CCS
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, convert_pid_to_crr(calculate_pid(control->Vset,RPM)));
	}
}
 80014d2:	e058      	b.n	8001586 <adaptiveCruiseControl+0x14a>
		else if (RTDistance <= ESTOP_DISTANCE) //  E-stop if to close
 80014d4:	2305      	movs	r3, #5
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	897a      	ldrh	r2, [r7, #10]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d80b      	bhi.n	80014f6 <adaptiveCruiseControl+0xba>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 80014de:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <adaptiveCruiseControl+0x15c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <adaptiveCruiseControl+0x15c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
			 ucmd = UserControl;
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <adaptiveCruiseControl+0x160>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
}
 80014f4:	e047      	b.n	8001586 <adaptiveCruiseControl+0x14a>
		else if (RTDistance < ESTOP_DISTANCE + control->Dset + DECREASE_ZONE && RTDistance > ESTOP_DISTANCE ) //
 80014f6:	897a      	ldrh	r2, [r7, #10]
 80014f8:	2305      	movs	r3, #5
 80014fa:	4619      	mov	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	440b      	add	r3, r1
 8001502:	2105      	movs	r1, #5
 8001504:	440b      	add	r3, r1
 8001506:	429a      	cmp	r2, r3
 8001508:	da3d      	bge.n	8001586 <adaptiveCruiseControl+0x14a>
 800150a:	2305      	movs	r3, #5
 800150c:	b29b      	uxth	r3, r3
 800150e:	897a      	ldrh	r2, [r7, #10]
 8001510:	429a      	cmp	r2, r3
 8001512:	d938      	bls.n	8001586 <adaptiveCruiseControl+0x14a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, convert_pid_to_crr(calculate_pid(v_Object,RPM)));
 8001514:	8afb      	ldrh	r3, [r7, #22]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	ee07 3a10 	vmov	s14, r3
 8001524:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001528:	eef0 0a47 	vmov.f32	s1, s14
 800152c:	eeb0 0a67 	vmov.f32	s0, s15
 8001530:	f7ff fec6 	bl	80012c0 <calculate_pid>
 8001534:	eef0 7a40 	vmov.f32	s15, s0
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <adaptiveCruiseControl+0x15c>)
 800153a:	681c      	ldr	r4, [r3, #0]
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	f7ff fe8a 	bl	8001258 <convert_pid_to_crr>
 8001544:	4603      	mov	r3, r0
 8001546:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001548:	e01d      	b.n	8001586 <adaptiveCruiseControl+0x14a>
		HAL_TIM_Base_Stop_IT(&htim4);       // turn of calculate speed run like CCS
 800154a:	4812      	ldr	r0, [pc, #72]	; (8001594 <adaptiveCruiseControl+0x158>)
 800154c:	f004 f8b0 	bl	80056b0 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, convert_pid_to_crr(calculate_pid(control->Vset,RPM)));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	885b      	ldrh	r3, [r3, #2]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155c:	89fb      	ldrh	r3, [r7, #14]
 800155e:	ee07 3a10 	vmov	s14, r3
 8001562:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001566:	eef0 0a47 	vmov.f32	s1, s14
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f7ff fea7 	bl	80012c0 <calculate_pid>
 8001572:	eef0 7a40 	vmov.f32	s15, s0
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <adaptiveCruiseControl+0x15c>)
 8001578:	681c      	ldr	r4, [r3, #0]
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	f7ff fe6b 	bl	8001258 <convert_pid_to_crr>
 8001582:	4603      	mov	r3, r0
 8001584:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001586:	bf00      	nop
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	2000000a 	.word	0x2000000a
 8001594:	2000026c 	.word	0x2000026c
 8001598:	20000224 	.word	0x20000224
 800159c:	20000000 	.word	0x20000000

080015a0 <debounceButton>:

void debounceButton(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin, uint32_t *last_debounce_time)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	460b      	mov	r3, r1
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	817b      	strh	r3, [r7, #10]
	uint32_t current_time = HAL_GetTick();
 80015ae:	f001 fc35 	bl	8002e1c <HAL_GetTick>
 80015b2:	6178      	str	r0, [r7, #20]
	if (current_time - *last_debounce_time > DEBOUNCE_DELAY)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c0:	d916      	bls.n	80015f0 <debounceButton+0x50>
	{
		*last_debounce_time = current_time;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 80015c8:	e008      	b.n	80015dc <debounceButton+0x3c>
		{
			if ( HAL_GetTick()- *last_debounce_time >= DEBOUNCE_DELAY)
 80015ca:	f001 fc27 	bl	8002e1c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015da:	d208      	bcs.n	80015ee <debounceButton+0x4e>
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 80015dc:	897b      	ldrh	r3, [r7, #10]
 80015de:	4619      	mov	r1, r3
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f002 fe71 	bl	80042c8 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0ee      	beq.n	80015ca <debounceButton+0x2a>
			{
				break;
			}
		}
	}
}
 80015ec:	e000      	b.n	80015f0 <debounceButton+0x50>
				break;
 80015ee:	bf00      	nop
}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <LCD_StartingScreen>:

void LCD_StartingScreen()
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b090      	sub	sp, #64	; 0x40
 80015fc:	af00      	add	r7, sp, #0

	char welcome_str[] = "Welcome"; //7
 80015fe:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <LCD_StartingScreen+0x138>)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001608:	e883 0003 	stmia.w	r3, {r0, r1}
	char system_str[] = "System turning on"; //17
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <LCD_StartingScreen+0x13c>)
 800160e:	f107 040c 	add.w	r4, r7, #12
 8001612:	461d      	mov	r5, r3
 8001614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001618:	682b      	ldr	r3, [r5, #0]
 800161a:	8023      	strh	r3, [r4, #0]
	char loading_str[] = "Loading"; //7
 800161c:	4a46      	ldr	r2, [pc, #280]	; (8001738 <LCD_StartingScreen+0x140>)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001624:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_put_cur(0, 6);
 8001628:	2106      	movs	r1, #6
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fd5a 	bl	80010e4 <lcd_put_cur>
	for (int i = 0; i < 7; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001634:	e00d      	b.n	8001652 <LCD_StartingScreen+0x5a>
	{
		lcd_send_data(welcome_str[i]);
 8001636:	f107 0220 	add.w	r2, r7, #32
 800163a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd07 	bl	8001054 <lcd_send_data>
		HAL_Delay(100);
 8001646:	2064      	movs	r0, #100	; 0x64
 8001648:	f001 fbf4 	bl	8002e34 <HAL_Delay>
	for (int i = 0; i < 7; i++)
 800164c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800164e:	3301      	adds	r3, #1
 8001650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001654:	2b06      	cmp	r3, #6
 8001656:	ddee      	ble.n	8001636 <LCD_StartingScreen+0x3e>
	}
	HAL_Delay(1000);
 8001658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165c:	f001 fbea 	bl	8002e34 <HAL_Delay>
	lcd_put_cur(1, 1);
 8001660:	2101      	movs	r1, #1
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff fd3e 	bl	80010e4 <lcd_put_cur>
	for (int i = 0; i < 17; i++)
 8001668:	2300      	movs	r3, #0
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
 800166c:	e00d      	b.n	800168a <LCD_StartingScreen+0x92>
	{
		lcd_send_data(system_str[i]);
 800166e:	f107 020c 	add.w	r2, r7, #12
 8001672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fceb 	bl	8001054 <lcd_send_data>
		HAL_Delay(100);
 800167e:	2064      	movs	r0, #100	; 0x64
 8001680:	f001 fbd8 	bl	8002e34 <HAL_Delay>
	for (int i = 0; i < 17; i++)
 8001684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001686:	3301      	adds	r3, #1
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
 800168a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800168c:	2b10      	cmp	r3, #16
 800168e:	ddee      	ble.n	800166e <LCD_StartingScreen+0x76>
	}
	HAL_Delay(500);
 8001690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001694:	f001 fbce 	bl	8002e34 <HAL_Delay>
	for (int i = 0; i < 2; i++)
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
 800169c:	e03f      	b.n	800171e <LCD_StartingScreen+0x126>
	{
		lcd_clear();
 800169e:	f7ff fd09 	bl	80010b4 <lcd_clear>
		for (int j = 1; j <= 3; j++)
 80016a2:	2301      	movs	r3, #1
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
 80016a6:	e034      	b.n	8001712 <LCD_StartingScreen+0x11a>
		{
			lcd_put_cur(1, 4);
 80016a8:	2104      	movs	r1, #4
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fd1a 	bl	80010e4 <lcd_put_cur>
			if (i == 0)
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d113      	bne.n	80016de <LCD_StartingScreen+0xe6>
			{
				for (int k = 0; k < 7; k++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ba:	e00c      	b.n	80016d6 <LCD_StartingScreen+0xde>
				{
                lcd_send_data(loading_str[k]);
 80016bc:	1d3a      	adds	r2, r7, #4
 80016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fcc5 	bl	8001054 <lcd_send_data>
                HAL_Delay(90);
 80016ca:	205a      	movs	r0, #90	; 0x5a
 80016cc:	f001 fbb2 	bl	8002e34 <HAL_Delay>
				for (int k = 0; k < 7; k++)
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	3301      	adds	r3, #1
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	2b06      	cmp	r3, #6
 80016da:	ddef      	ble.n	80016bc <LCD_StartingScreen+0xc4>
 80016dc:	e002      	b.n	80016e4 <LCD_StartingScreen+0xec>
				}
			}
			else
			{
				lcd_send_string("Loading");
 80016de:	4816      	ldr	r0, [pc, #88]	; (8001738 <LCD_StartingScreen+0x140>)
 80016e0:	f7ff fd6f 	bl	80011c2 <lcd_send_string>
			}
			for (int k = 0; k < j; k++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e8:	e008      	b.n	80016fc <LCD_StartingScreen+0x104>
			{
				lcd_send_data('.');
 80016ea:	202e      	movs	r0, #46	; 0x2e
 80016ec:	f7ff fcb2 	bl	8001054 <lcd_send_data>
				HAL_Delay(70);
 80016f0:	2046      	movs	r0, #70	; 0x46
 80016f2:	f001 fb9f 	bl	8002e34 <HAL_Delay>
			for (int k = 0; k < j; k++)
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	3301      	adds	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80016fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf2      	blt.n	80016ea <LCD_StartingScreen+0xf2>
			}
			HAL_Delay(400);
 8001704:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001708:	f001 fb94 	bl	8002e34 <HAL_Delay>
		for (int j = 1; j <= 3; j++)
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	3301      	adds	r3, #1
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
 8001712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001714:	2b03      	cmp	r3, #3
 8001716:	ddc7      	ble.n	80016a8 <LCD_StartingScreen+0xb0>
	for (int i = 0; i < 2; i++)
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	3301      	adds	r3, #1
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
 800171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001720:	2b01      	cmp	r3, #1
 8001722:	ddbc      	ble.n	800169e <LCD_StartingScreen+0xa6>
		}
	}
	lcd_clear();
 8001724:	f7ff fcc6 	bl	80010b4 <lcd_clear>
}
 8001728:	bf00      	nop
 800172a:	3740      	adds	r7, #64	; 0x40
 800172c:	46bd      	mov	sp, r7
 800172e:	bdb0      	pop	{r4, r5, r7, pc}
 8001730:	080078d8 	.word	0x080078d8
 8001734:	080078e0 	.word	0x080078e0
 8001738:	080078d0 	.word	0x080078d0

0800173c <display>:

void display()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b098      	sub	sp, #96	; 0x60
 8001740:	af02      	add	r7, sp, #8
		char Buffer[4][20];
		if (ucmd == CruiseControl)
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <display+0x100>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d10e      	bne.n	8001768 <display+0x2c>
		{
			sprintf(Buffer[0],"%s%s%s","Mode :","CC   |EN:",(engineStat>0)?"ON":"OFF");
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <display+0x104>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <display+0x1a>
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <display+0x108>)
 8001754:	e000      	b.n	8001758 <display+0x1c>
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <display+0x10c>)
 8001758:	1d38      	adds	r0, r7, #4
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <display+0x110>)
 800175e:	4a3c      	ldr	r2, [pc, #240]	; (8001850 <display+0x114>)
 8001760:	493c      	ldr	r1, [pc, #240]	; (8001854 <display+0x118>)
 8001762:	f005 fc05 	bl	8006f70 <siprintf>
 8001766:	e020      	b.n	80017aa <display+0x6e>
		}
		else if (ucmd == AdaptiveCruiseControl)
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <display+0x100>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d10e      	bne.n	800178e <display+0x52>
		{
			sprintf(Buffer[0],"%s%s%s","Mode :","ACC  |EN:",(engineStat>0)?"ON":"OFF");
 8001770:	4b33      	ldr	r3, [pc, #204]	; (8001840 <display+0x104>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <display+0x40>
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <display+0x108>)
 800177a:	e000      	b.n	800177e <display+0x42>
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <display+0x10c>)
 800177e:	1d38      	adds	r0, r7, #4
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4b35      	ldr	r3, [pc, #212]	; (8001858 <display+0x11c>)
 8001784:	4a32      	ldr	r2, [pc, #200]	; (8001850 <display+0x114>)
 8001786:	4933      	ldr	r1, [pc, #204]	; (8001854 <display+0x118>)
 8001788:	f005 fbf2 	bl	8006f70 <siprintf>
 800178c:	e00d      	b.n	80017aa <display+0x6e>
		}
		else
		{
			sprintf(Buffer[0],"%s%s%s","Mode :","UC   |EN:",(engineStat>0)?"ON":"OFF");
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <display+0x104>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <display+0x5e>
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <display+0x108>)
 8001798:	e000      	b.n	800179c <display+0x60>
 800179a:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <display+0x10c>)
 800179c:	1d38      	adds	r0, r7, #4
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <display+0x120>)
 80017a2:	4a2b      	ldr	r2, [pc, #172]	; (8001850 <display+0x114>)
 80017a4:	492b      	ldr	r1, [pc, #172]	; (8001854 <display+0x118>)
 80017a6:	f005 fbe3 	bl	8006f70 <siprintf>
		}
		sprintf(Buffer[1],"%s%d%s","Speed:",RPM," RPM");
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <display+0x124>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	f103 0014 	add.w	r0, r3, #20
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <display+0x128>)
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4613      	mov	r3, r2
 80017bc:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <display+0x12c>)
 80017be:	492b      	ldr	r1, [pc, #172]	; (800186c <display+0x130>)
 80017c0:	f005 fbd6 	bl	8006f70 <siprintf>
		sprintf(Buffer[2],"%s%d%s%d","Vset :",speedSet," |Dis:", RTDistance);
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <display+0x134>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <display+0x138>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <display+0x13c>)
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	460b      	mov	r3, r1
 80017de:	4a27      	ldr	r2, [pc, #156]	; (800187c <display+0x140>)
 80017e0:	4927      	ldr	r1, [pc, #156]	; (8001880 <display+0x144>)
 80017e2:	f005 fbc5 	bl	8006f70 <siprintf>
		sprintf(Buffer[3],"%s%d%s","Dset :",distanceSet, "cm");
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <display+0x148>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <display+0x14c>)
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	4a24      	ldr	r2, [pc, #144]	; (800188c <display+0x150>)
 80017fa:	491c      	ldr	r1, [pc, #112]	; (800186c <display+0x130>)
 80017fc:	f005 fbb8 	bl	8006f70 <siprintf>
		lcd_clear();
 8001800:	f7ff fc58 	bl	80010b4 <lcd_clear>
		for(int i = 0 ; i < 4; i ++)
 8001804:	2300      	movs	r3, #0
 8001806:	657b      	str	r3, [r7, #84]	; 0x54
 8001808:	e010      	b.n	800182c <display+0xf0>
		{
			lcd_put_cur(i,0);
 800180a:	2100      	movs	r1, #0
 800180c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800180e:	f7ff fc69 	bl	80010e4 <lcd_put_cur>
			lcd_send_string(Buffer[i]);
 8001812:	1d39      	adds	r1, r7, #4
 8001814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fcce 	bl	80011c2 <lcd_send_string>
		for(int i = 0 ; i < 4; i ++)
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	3301      	adds	r3, #1
 800182a:	657b      	str	r3, [r7, #84]	; 0x54
 800182c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182e:	2b03      	cmp	r3, #3
 8001830:	ddeb      	ble.n	800180a <display+0xce>
		}

}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3758      	adds	r7, #88	; 0x58
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000000 	.word	0x20000000
 8001840:	2000034c 	.word	0x2000034c
 8001844:	080078f4 	.word	0x080078f4
 8001848:	080078f8 	.word	0x080078f8
 800184c:	080078fc 	.word	0x080078fc
 8001850:	08007908 	.word	0x08007908
 8001854:	08007910 	.word	0x08007910
 8001858:	08007918 	.word	0x08007918
 800185c:	08007924 	.word	0x08007924
 8001860:	20000350 	.word	0x20000350
 8001864:	08007940 	.word	0x08007940
 8001868:	08007930 	.word	0x08007930
 800186c:	08007938 	.word	0x08007938
 8001870:	2000000a 	.word	0x2000000a
 8001874:	20000352 	.word	0x20000352
 8001878:	0800795c 	.word	0x0800795c
 800187c:	08007948 	.word	0x08007948
 8001880:	08007950 	.word	0x08007950
 8001884:	2000000c 	.word	0x2000000c
 8001888:	0800796c 	.word	0x0800796c
 800188c:	08007964 	.word	0x08007964

08001890 <userControl>:



void userControl(uint8_t gas_val,uint16_t RPM)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	80bb      	strh	r3, [r7, #4]
	uint16_t ccr_val;// xong b�? dòng này vào h
	ccr_val = (gas_val * 999) / 100;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <userControl+0x54>)
 80018ac:	fb82 1203 	smull	r1, r2, r2, r3
 80018b0:	1152      	asrs	r2, r2, #5
 80018b2:	17db      	asrs	r3, r3, #31
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	81fb      	strh	r3, [r7, #14]
	TIM3 ->CCR1 = ccr_val;
 80018b8:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <userControl+0x58>)
 80018ba:	89fb      	ldrh	r3, [r7, #14]
 80018bc:	6353      	str	r3, [r2, #52]	; 0x34
	if (RPM> 50)
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	2b32      	cmp	r3, #50	; 0x32
 80018c2:	d905      	bls.n	80018d0 <userControl+0x40>
		HAL_GPIO_WritePin(GPIOE, LEDSTAT_Pin,0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <userControl+0x5c>)
 80018ca:	f002 fd15 	bl	80042f8 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(GPIOE, LEDSTAT_Pin,1);
      
}
 80018ce:	e004      	b.n	80018da <userControl+0x4a>
    	HAL_GPIO_WritePin(GPIOE, LEDSTAT_Pin,1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <userControl+0x5c>)
 80018d6:	f002 fd0f 	bl	80042f8 <HAL_GPIO_WritePin>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	51eb851f 	.word	0x51eb851f
 80018e8:	40000400 	.word	0x40000400
 80018ec:	40021000 	.word	0x40021000

080018f0 <Cmd_Handle>:

void Cmd_Handle(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	switch (ucmd) {
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <Cmd_Handle+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d017      	beq.n	800192c <Cmd_Handle+0x3c>
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	dc21      	bgt.n	8001944 <Cmd_Handle+0x54>
 8001900:	2b01      	cmp	r3, #1
 8001902:	d002      	beq.n	800190a <Cmd_Handle+0x1a>
 8001904:	2b02      	cmp	r3, #2
 8001906:	d00a      	beq.n	800191e <Cmd_Handle+0x2e>
//        ucmd = UserControl;
//      }
			break;

	}
}
 8001908:	e01c      	b.n	8001944 <Cmd_Handle+0x54>
			userControl(gas_val,RPM);
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <Cmd_Handle+0x5c>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <Cmd_Handle+0x60>)
 8001912:	8812      	ldrh	r2, [r2, #0]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ffba 	bl	8001890 <userControl>
			break;
 800191c:	e012      	b.n	8001944 <Cmd_Handle+0x54>
			cruiseControl(&control,RPM);
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <Cmd_Handle+0x60>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <Cmd_Handle+0x64>)
 8001926:	f7ff fd4f 	bl	80013c8 <cruiseControl>
			break;
 800192a:	e00b      	b.n	8001944 <Cmd_Handle+0x54>
			adaptiveCruiseControl(RPM, deltaRPM, RTDistance,&control);
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <Cmd_Handle+0x60>)
 800192e:	8818      	ldrh	r0, [r3, #0]
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <Cmd_Handle+0x68>)
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	b299      	uxth	r1, r3
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <Cmd_Handle+0x6c>)
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <Cmd_Handle+0x64>)
 800193e:	f7ff fd7d 	bl	800143c <adaptiveCruiseControl>
			break;
 8001942:	bf00      	nop
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	2000034e 	.word	0x2000034e
 8001950:	20000350 	.word	0x20000350
 8001954:	20000004 	.word	0x20000004
 8001958:	20000356 	.word	0x20000356
 800195c:	20000352 	.word	0x20000352

08001960 <warningDis>:

void warningDis(uint16_t RTDistance)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
	static uint32_t lastime = 0;
	if (RTDistance <= ESTOP_DISTANCE)
 800196a:	2305      	movs	r3, #5
 800196c:	b29b      	uxth	r3, r3
 800196e:	88fa      	ldrh	r2, [r7, #6]
 8001970:	429a      	cmp	r2, r3
 8001972:	d816      	bhi.n	80019a2 <warningDis+0x42>
	{
		if (HAL_GetTick() - lastime >= RTDistance *10)
 8001974:	f001 fa52 	bl	8002e1c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <warningDis+0x68>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1ad1      	subs	r1, r2, r3
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4299      	cmp	r1, r3
 800198c:	d318      	bcc.n	80019c0 <warningDis+0x60>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800198e:	2102      	movs	r1, #2
 8001990:	480e      	ldr	r0, [pc, #56]	; (80019cc <warningDis+0x6c>)
 8001992:	f002 fcca 	bl	800432a <HAL_GPIO_TogglePin>
			lastime = HAL_GetTick();
 8001996:	f001 fa41 	bl	8002e1c <HAL_GetTick>
 800199a:	4603      	mov	r3, r0
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <warningDis+0x68>)
 800199e:	6013      	str	r3, [r2, #0]
		}
	}else if (RTDistance > ESTOP_DISTANCE) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		lastime = HAL_GetTick();
	}
}
 80019a0:	e00e      	b.n	80019c0 <warningDis+0x60>
	}else if (RTDistance > ESTOP_DISTANCE) {
 80019a2:	2305      	movs	r3, #5
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d909      	bls.n	80019c0 <warningDis+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2102      	movs	r1, #2
 80019b0:	4806      	ldr	r0, [pc, #24]	; (80019cc <warningDis+0x6c>)
 80019b2:	f002 fca1 	bl	80042f8 <HAL_GPIO_WritePin>
		lastime = HAL_GetTick();
 80019b6:	f001 fa31 	bl	8002e1c <HAL_GetTick>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a02      	ldr	r2, [pc, #8]	; (80019c8 <warningDis+0x68>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000378 	.word	0x20000378
 80019cc:	40020400 	.word	0x40020400

080019d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e0:	f000 80e3 	beq.w	8001baa <HAL_GPIO_EXTI_Callback+0x1da>
 80019e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e8:	f300 8121 	bgt.w	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
 80019ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f0:	f000 810a 	beq.w	8001c08 <HAL_GPIO_EXTI_Callback+0x238>
 80019f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f8:	f300 8119 	bgt.w	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a00:	f000 80f8 	beq.w	8001bf4 <HAL_GPIO_EXTI_Callback+0x224>
 8001a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a08:	f300 8111 	bgt.w	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	dc49      	bgt.n	8001aa4 <HAL_GPIO_EXTI_Callback+0xd4>
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f340 810c 	ble.w	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
 8001a16:	3b01      	subs	r3, #1
 8001a18:	2b1f      	cmp	r3, #31
 8001a1a:	f200 8108 	bhi.w	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001bd3 	.word	0x08001bd3
 8001a28:	08001acb 	.word	0x08001acb
 8001a2c:	08001c2f 	.word	0x08001c2f
 8001a30:	08001aeb 	.word	0x08001aeb
 8001a34:	08001c2f 	.word	0x08001c2f
 8001a38:	08001c2f 	.word	0x08001c2f
 8001a3c:	08001c2f 	.word	0x08001c2f
 8001a40:	08001aab 	.word	0x08001aab
 8001a44:	08001c2f 	.word	0x08001c2f
 8001a48:	08001c2f 	.word	0x08001c2f
 8001a4c:	08001c2f 	.word	0x08001c2f
 8001a50:	08001c2f 	.word	0x08001c2f
 8001a54:	08001c2f 	.word	0x08001c2f
 8001a58:	08001c2f 	.word	0x08001c2f
 8001a5c:	08001c2f 	.word	0x08001c2f
 8001a60:	08001b0f 	.word	0x08001b0f
 8001a64:	08001c2f 	.word	0x08001c2f
 8001a68:	08001c2f 	.word	0x08001c2f
 8001a6c:	08001c2f 	.word	0x08001c2f
 8001a70:	08001c2f 	.word	0x08001c2f
 8001a74:	08001c2f 	.word	0x08001c2f
 8001a78:	08001c2f 	.word	0x08001c2f
 8001a7c:	08001c2f 	.word	0x08001c2f
 8001a80:	08001c2f 	.word	0x08001c2f
 8001a84:	08001c2f 	.word	0x08001c2f
 8001a88:	08001c2f 	.word	0x08001c2f
 8001a8c:	08001c2f 	.word	0x08001c2f
 8001a90:	08001c2f 	.word	0x08001c2f
 8001a94:	08001c2f 	.word	0x08001c2f
 8001a98:	08001c2f 	.word	0x08001c2f
 8001a9c:	08001c2f 	.word	0x08001c2f
 8001aa0:	08001b61 	.word	0x08001b61
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d06f      	beq.n	8001b88 <HAL_GPIO_EXTI_Callback+0x1b8>
		case StopControl2_Pin:
				debounceButton(GPIOE,GPIO_Pin, &last_debounce_time);
				ucmd = UserControl;
				break;
	}
}
 8001aa8:	e0c1      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				debounceButton(GPIOC,GPIO_Pin, &last_debounce_time);
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4a62      	ldr	r2, [pc, #392]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4862      	ldr	r0, [pc, #392]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001ab2:	f7ff fd75 	bl	80015a0 <debounceButton>
				ucmd = (ucmd != 2 ) ? 2 :  1;
 8001ab6:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x270>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d001      	beq.n	8001ac2 <HAL_GPIO_EXTI_Callback+0xf2>
 8001abe:	2202      	movs	r2, #2
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_EXTI_Callback+0xf4>
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x270>)
 8001ac6:	701a      	strb	r2, [r3, #0]
				break;
 8001ac8:	e0b1      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				debounceButton(GPIOC,GPIO_Pin, &last_debounce_time);
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	4a5a      	ldr	r2, [pc, #360]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001ace:	4619      	mov	r1, r3
 8001ad0:	485a      	ldr	r0, [pc, #360]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001ad2:	f7ff fd65 	bl	80015a0 <debounceButton>
				ucmd = (ucmd != 3 ) ? 3 :  1;
 8001ad6:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x270>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d001      	beq.n	8001ae2 <HAL_GPIO_EXTI_Callback+0x112>
 8001ade:	2203      	movs	r2, #3
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x114>
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x270>)
 8001ae6:	701a      	strb	r2, [r3, #0]
				break;
 8001ae8:	e0a1      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				debounceButton(GPIOC,GPIO_Pin, &last_debounce_time);
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001aee:	4619      	mov	r1, r3
 8001af0:	4852      	ldr	r0, [pc, #328]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001af2:	f7ff fd55 	bl	80015a0 <debounceButton>
				engineStat = engineStat ^ 1;
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x274>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x274>)
 8001b02:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOA, ENGINE_CONTROL_Pin);
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	4850      	ldr	r0, [pc, #320]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x278>)
 8001b08:	f002 fc0f 	bl	800432a <HAL_GPIO_TogglePin>
				break;
 8001b0c:	e08f      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				debounceButton(GPIOE,GPIO_Pin, &last_debounce_time);
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4a49      	ldr	r2, [pc, #292]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001b12:	4619      	mov	r1, r3
 8001b14:	484d      	ldr	r0, [pc, #308]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001b16:	f7ff fd43 	bl	80015a0 <debounceButton>
				control.Dset = distanceSet ;
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b1c:	881a      	ldrh	r2, [r3, #0]
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b20:	801a      	strh	r2, [r3, #0]
				control.Vset = speedSet ;
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b24:	881a      	ldrh	r2, [r3, #0]
 8001b26:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b28:	805a      	strh	r2, [r3, #2]
				if(ucmd ==2)
 8001b2a:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x270>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d106      	bne.n	8001b40 <HAL_GPIO_EXTI_Callback+0x170>
					cruiseControl(&control, RPM);
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4846      	ldr	r0, [pc, #280]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b3a:	f7ff fc45 	bl	80013c8 <cruiseControl>
				break;
 8001b3e:	e06d      	b.n	8001c1c <HAL_GPIO_EXTI_Callback+0x24c>
				}else if(ucmd == 3)
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x270>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d169      	bne.n	8001c1c <HAL_GPIO_EXTI_Callback+0x24c>
					adaptiveCruiseControl(RPM, deltaRPM, RTDistance, &control);
 8001b48:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001b4a:	8818      	ldrh	r0, [r3, #0]
 8001b4c:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	b299      	uxth	r1, r3
 8001b54:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x294>)
 8001b56:	881a      	ldrh	r2, [r3, #0]
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b5a:	f7ff fc6f 	bl	800143c <adaptiveCruiseControl>
				break;
 8001b5e:	e05d      	b.n	8001c1c <HAL_GPIO_EXTI_Callback+0x24c>
				debounceButton(GPIOE,GPIO_Pin, &last_debounce_time);
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4a35      	ldr	r2, [pc, #212]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001b64:	4619      	mov	r1, r3
 8001b66:	4839      	ldr	r0, [pc, #228]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001b68:	f7ff fd1a 	bl	80015a0 <debounceButton>
				speedSet += speedStep;
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	330a      	adds	r3, #10
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b76:	801a      	strh	r2, [r3, #0]
				if(speedSet >= speedSetMax)
 8001b78:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	2bf9      	cmp	r3, #249	; 0xf9
 8001b7e:	d94f      	bls.n	8001c20 <HAL_GPIO_EXTI_Callback+0x250>
					speedSet = speedSetMax;
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b82:	22fa      	movs	r2, #250	; 0xfa
 8001b84:	801a      	strh	r2, [r3, #0]
				break;
 8001b86:	e04b      	b.n	8001c20 <HAL_GPIO_EXTI_Callback+0x250>
				debounceButton(GPIOE,GPIO_Pin, &last_debounce_time);
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	482f      	ldr	r0, [pc, #188]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001b90:	f7ff fd06 	bl	80015a0 <debounceButton>
				if(speedSet > speedSetMin)
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	2b32      	cmp	r3, #50	; 0x32
 8001b9a:	d943      	bls.n	8001c24 <HAL_GPIO_EXTI_Callback+0x254>
					speedSet -= speedStep;
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	3b0a      	subs	r3, #10
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ba6:	801a      	strh	r2, [r3, #0]
				break;
 8001ba8:	e03c      	b.n	8001c24 <HAL_GPIO_EXTI_Callback+0x254>
				debounceButton(GPIOC,GPIO_Pin, &last_debounce_time);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4822      	ldr	r0, [pc, #136]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001bb2:	f7ff fcf5 	bl	80015a0 <debounceButton>
				distanceSet += distanceStep;
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	3305      	adds	r3, #5
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001bc0:	801a      	strh	r2, [r3, #0]
				if(distanceSet >= distanceSetMax)
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	2b1d      	cmp	r3, #29
 8001bc8:	d92e      	bls.n	8001c28 <HAL_GPIO_EXTI_Callback+0x258>
					distanceSet = distanceSetMax;
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001bcc:	221e      	movs	r2, #30
 8001bce:	801a      	strh	r2, [r3, #0]
				break;
 8001bd0:	e02a      	b.n	8001c28 <HAL_GPIO_EXTI_Callback+0x258>
				debounceButton(GPIOC,GPIO_Pin, &last_debounce_time);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4818      	ldr	r0, [pc, #96]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001bda:	f7ff fce1 	bl	80015a0 <debounceButton>
				if(distanceSet > distanceSetMin)
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2b0a      	cmp	r3, #10
 8001be4:	d922      	bls.n	8001c2c <HAL_GPIO_EXTI_Callback+0x25c>
					distanceSet -= distanceStep;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	3b05      	subs	r3, #5
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001bf0:	801a      	strh	r2, [r3, #0]
				break;
 8001bf2:	e01b      	b.n	8001c2c <HAL_GPIO_EXTI_Callback+0x25c>
				debounceButton(GPIOE,GPIO_Pin, &last_debounce_time);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001bfc:	f7ff fcd0 	bl	80015a0 <debounceButton>
				ucmd = UserControl;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x270>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
				break;
 8001c06:	e012      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				debounceButton(GPIOE,GPIO_Pin, &last_debounce_time);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x268>)
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480f      	ldr	r0, [pc, #60]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001c10:	f7ff fcc6 	bl	80015a0 <debounceButton>
				ucmd = UserControl;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x270>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
				break;
 8001c1a:	e008      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				break;
 8001c1c:	bf00      	nop
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				break;
 8001c20:	bf00      	nop
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				break;
 8001c24:	bf00      	nop
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				break;
 8001c28:	bf00      	nop
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x25e>
				break;
 8001c2c:	bf00      	nop
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000344 	.word	0x20000344
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	20000000 	.word	0x20000000
 8001c44:	2000034c 	.word	0x2000034c
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	2000000c 	.word	0x2000000c
 8001c54:	20000004 	.word	0x20000004
 8001c58:	2000000a 	.word	0x2000000a
 8001c5c:	20000350 	.word	0x20000350
 8001c60:	20000356 	.word	0x20000356
 8001c64:	20000352 	.word	0x20000352

08001c68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

	if		(htim == &htim5)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a4f      	ldr	r2, [pc, #316]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d14d      	bne.n	8001d14 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		static   uint32_t Last_Encoder = 0 ;
		volatile uint32_t Realtime_Encoder = __HAL_TIM_GET_COUNTER(&htim2);
 8001c78:	4b4e      	ldr	r3, [pc, #312]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	60bb      	str	r3, [r7, #8]

		int32_t Delta_Encoder = Realtime_Encoder - Last_Encoder;
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
		if 		(Delta_Encoder < -(0xffffffff / 2)) // Xử lý trư�?ng hợp quay ngược
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c90:	d803      	bhi.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0x32>
			{
				Delta_Encoder += 0xffffffff;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x3e>
			}
		else if (Delta_Encoder > (0xffffffff / 2)) // Xử lý trư�?ng hợp quay xuôi
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da02      	bge.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x3e>
			{
				Delta_Encoder -= 0xffffffff;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
			}
		Last_Encoder = Realtime_Encoder;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	4a43      	ldr	r2, [pc, #268]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001caa:	6013      	str	r3, [r2, #0]
		RPM = fabs(Delta_Encoder / 1320.0 * 600);
 8001cac:	6978      	ldr	r0, [r7, #20]
 8001cae:	f7fe fc31 	bl	8000514 <__aeabi_i2d>
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001cb8:	f7fe fdc0 	bl	800083c <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cca:	f7fe fc8d 	bl	80005e8 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4614      	mov	r4, r2
 8001cd4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4629      	mov	r1, r5
 8001cdc:	f7fe febe 	bl	8000a5c <__aeabi_d2uiz>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001ce6:	801a      	strh	r2, [r3, #0]
		RTDistance = HCSR04_GetDis();
 8001ce8:	f7ff f960 	bl	8000fac <HCSR04_GetDis>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001cf2:	801a      	strh	r2, [r3, #0]
		a= engineStat;
 8001cf4:	4b35      	ldr	r3, [pc, #212]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001cfc:	601a      	str	r2, [r3, #0]
		b=ucmd;
 8001cfe:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001d06:	601a      	str	r2, [r3, #0]
		c=RPM;
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d10:	601a      	str	r2, [r3, #0]
	}
	else if (htim == &htim6)
	{
		display();
	}
}
 8001d12:	e040      	b.n	8001d96 <HAL_TIM_PeriodElapsedCallback+0x12e>
	else if ( htim == &htim4)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a32      	ldr	r2, [pc, #200]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d136      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x122>
		deltaDistance = RTDistance - lasRTDistance;
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001d1e:	881a      	ldrh	r2, [r3, #0]
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	827b      	strh	r3, [r7, #18]
		deltaSpeed    = deltaDistance / 0.12; // speed() cm/s every 0.12s has interupt
 8001d2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fbf0 	bl	8000514 <__aeabi_i2d>
 8001d34:	a31a      	add	r3, pc, #104	; (adr r3, 8001da0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fd7f 	bl	800083c <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe fea9 	bl	8000a9c <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60fb      	str	r3, [r7, #12]
		deltaRPM =((deltaSpeed * 60)/wheelPerimeter);
 8001d4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d52:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001de8 <HAL_TIM_PeriodElapsedCallback+0x180>
 8001d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5a:	ee17 0a90 	vmov	r0, s15
 8001d5e:	f7fe fbeb 	bl	8000538 <__aeabi_f2d>
 8001d62:	a311      	add	r3, pc, #68	; (adr r3, 8001da8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fd68 	bl	800083c <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe fe4a 	bl	8000a0c <__aeabi_d2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d7e:	801a      	strh	r2, [r3, #0]
		lasRTDistance = RTDistance;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001d86:	801a      	strh	r2, [r3, #0]
}
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_PeriodElapsedCallback+0x12e>
	else if (htim == &htim6)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_PeriodElapsedCallback+0x12e>
		display();
 8001d92:	f7ff fcd3 	bl	800173c <display>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	eb851eb8 	.word	0xeb851eb8
 8001da4:	3fbeb851 	.word	0x3fbeb851
 8001da8:	13165d3a 	.word	0x13165d3a
 8001dac:	40346b9b 	.word	0x40346b9b
 8001db0:	200002b4 	.word	0x200002b4
 8001db4:	200001dc 	.word	0x200001dc
 8001db8:	2000037c 	.word	0x2000037c
 8001dbc:	4094a000 	.word	0x4094a000
 8001dc0:	4082c000 	.word	0x4082c000
 8001dc4:	20000350 	.word	0x20000350
 8001dc8:	20000352 	.word	0x20000352
 8001dcc:	2000034c 	.word	0x2000034c
 8001dd0:	2000035c 	.word	0x2000035c
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000360 	.word	0x20000360
 8001ddc:	20000364 	.word	0x20000364
 8001de0:	2000026c 	.word	0x2000026c
 8001de4:	20000380 	.word	0x20000380
 8001de8:	42700000 	.word	0x42700000
 8001dec:	20000356 	.word	0x20000356
 8001df0:	200002fc 	.word	0x200002fc

08001df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df8:	f000 ffaa 	bl	8002d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dfc:	f000 f858 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e00:	f000 fb70 	bl	80024e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e04:	f000 fb4e 	bl	80024a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e08:	f000 f8bc 	bl	8001f84 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001e0c:	f000 f90c 	bl	8002028 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001e10:	f000 f938 	bl	8002084 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e14:	f000 f9aa 	bl	800216c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e18:	f000 f9fc 	bl	8002214 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e1c:	f000 fa70 	bl	8002300 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e20:	f000 fabc 	bl	800239c <MX_TIM5_Init>
  MX_TIM6_Init();
 8001e24:	f000 fb08 	bl	8002438 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4818      	ldr	r0, [pc, #96]	; (8001e8c <main+0x98>)
 8001e2c:	f003 fdea 	bl	8005a04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8001e30:	2100      	movs	r1, #0
 8001e32:	4817      	ldr	r0, [pc, #92]	; (8001e90 <main+0x9c>)
 8001e34:	f003 ffb4 	bl	8005da0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8001e38:	2104      	movs	r1, #4
 8001e3a:	4815      	ldr	r0, [pc, #84]	; (8001e90 <main+0x9c>)
 8001e3c:	f003 ffb0 	bl	8005da0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8001e40:	4814      	ldr	r0, [pc, #80]	; (8001e94 <main+0xa0>)
 8001e42:	f003 fbc5 	bl	80055d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim6);
 8001e46:	4814      	ldr	r0, [pc, #80]	; (8001e98 <main+0xa4>)
 8001e48:	f003 fc32 	bl	80056b0 <HAL_TIM_Base_Stop_IT>

  HAL_TIM_Base_Stop_IT(&htim4);
 8001e4c:	4813      	ldr	r0, [pc, #76]	; (8001e9c <main+0xa8>)
 8001e4e:	f003 fc2f 	bl	80056b0 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e52:	2100      	movs	r1, #0
 8001e54:	4812      	ldr	r0, [pc, #72]	; (8001ea0 <main+0xac>)
 8001e56:	f003 fcb3 	bl	80057c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4810      	ldr	r0, [pc, #64]	; (8001ea0 <main+0xac>)
 8001e5e:	f003 fcaf 	bl	80057c0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1,&value,1);
 8001e62:	2201      	movs	r2, #1
 8001e64:	490f      	ldr	r1, [pc, #60]	; (8001ea4 <main+0xb0>)
 8001e66:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <main+0xb4>)
 8001e68:	f001 f84c 	bl	8002f04 <HAL_ADC_Start_DMA>
  lcd_init();
 8001e6c:	f7ff f96c 	bl	8001148 <lcd_init>
  LCD_StartingScreen();
 8001e70:	f7ff fbc2 	bl	80015f8 <LCD_StartingScreen>
  HAL_TIM_Base_Start_IT(&htim6);
 8001e74:	4808      	ldr	r0, [pc, #32]	; (8001e98 <main+0xa4>)
 8001e76:	f003 fbab 	bl	80055d0 <HAL_TIM_Base_Start_IT>

  while (1)
  {

	  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
	  Cmd_Handle();
 8001e7a:	f7ff fd39 	bl	80018f0 <Cmd_Handle>
	  warningDis(RTDistance);
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <main+0xb8>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fd6c 	bl	8001960 <warningDis>
	  Cmd_Handle();
 8001e88:	e7f7      	b.n	8001e7a <main+0x86>
 8001e8a:	bf00      	nop
 8001e8c:	20000194 	.word	0x20000194
 8001e90:	200001dc 	.word	0x200001dc
 8001e94:	200002b4 	.word	0x200002b4
 8001e98:	200002fc 	.word	0x200002fc
 8001e9c:	2000026c 	.word	0x2000026c
 8001ea0:	20000224 	.word	0x20000224
 8001ea4:	20000348 	.word	0x20000348
 8001ea8:	20000098 	.word	0x20000098
 8001eac:	20000352 	.word	0x20000352

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b094      	sub	sp, #80	; 0x50
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	f107 0320 	add.w	r3, r7, #32
 8001eba:	2230      	movs	r2, #48	; 0x30
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f005 f876 	bl	8006fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <SystemClock_Config+0xcc>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <SystemClock_Config+0xcc>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee4:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <SystemClock_Config+0xcc>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <SystemClock_Config+0xd0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <SystemClock_Config+0xd0>)
 8001efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <SystemClock_Config+0xd0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f16:	2302      	movs	r3, #2
 8001f18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f20:	2304      	movs	r3, #4
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f30:	f107 0320 	add.w	r3, r7, #32
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 fe77 	bl	8004c28 <HAL_RCC_OscConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f40:	f000 fbcc 	bl	80026dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f44:	230f      	movs	r3, #15
 8001f46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2103      	movs	r1, #3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 f8d8 	bl	8005118 <HAL_RCC_ClockConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f6e:	f000 fbb5 	bl	80026dc <Error_Handler>
  }
}
 8001f72:	bf00      	nop
 8001f74:	3750      	adds	r7, #80	; 0x50
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40007000 	.word	0x40007000

08001f84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <MX_ADC1_Init+0x98>)
 8001f98:	4a21      	ldr	r2, [pc, #132]	; (8002020 <MX_ADC1_Init+0x9c>)
 8001f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	; (800201c <MX_ADC1_Init+0x98>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <MX_ADC1_Init+0x98>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <MX_ADC1_Init+0x98>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fae:	4b1b      	ldr	r3, [pc, #108]	; (800201c <MX_ADC1_Init+0x98>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_ADC1_Init+0x98>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_ADC1_Init+0x98>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_ADC1_Init+0x98>)
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <MX_ADC1_Init+0xa0>)
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_ADC1_Init+0x98>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_ADC1_Init+0x98>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_ADC1_Init+0x98>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_ADC1_Init+0x98>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fe2:	480e      	ldr	r0, [pc, #56]	; (800201c <MX_ADC1_Init+0x98>)
 8001fe4:	f000 ff4a 	bl	8002e7c <HAL_ADC_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001fee:	f000 fb75 	bl	80026dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ffe:	463b      	mov	r3, r7
 8002000:	4619      	mov	r1, r3
 8002002:	4806      	ldr	r0, [pc, #24]	; (800201c <MX_ADC1_Init+0x98>)
 8002004:	f001 f8a2 	bl	800314c <HAL_ADC_ConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800200e:	f000 fb65 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000098 	.word	0x20000098
 8002020:	40012000 	.word	0x40012000
 8002024:	0f000001 	.word	0x0f000001

08002028 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <MX_I2C2_Init+0x50>)
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <MX_I2C2_Init+0x54>)
 8002030:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_I2C2_Init+0x50>)
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <MX_I2C2_Init+0x58>)
 8002036:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_I2C2_Init+0x50>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_I2C2_Init+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_I2C2_Init+0x50>)
 8002046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800204a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <MX_I2C2_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_I2C2_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <MX_I2C2_Init+0x50>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_I2C2_Init+0x50>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <MX_I2C2_Init+0x50>)
 8002066:	f002 f993 	bl	8004390 <HAL_I2C_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002070:	f000 fb34 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000140 	.word	0x20000140
 800207c:	40005800 	.word	0x40005800
 8002080:	000186a0 	.word	0x000186a0

08002084 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0318 	add.w	r3, r7, #24
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020a2:	463b      	mov	r3, r7
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020b0:	4a2d      	ldr	r2, [pc, #180]	; (8002168 <MX_TIM1_Init+0xe4>)
 80020b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020b6:	2263      	movs	r2, #99	; 0x63
 80020b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020da:	4822      	ldr	r0, [pc, #136]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020dc:	f003 fa28 	bl	8005530 <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80020e6:	f000 faf9 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4619      	mov	r1, r3
 80020f6:	481b      	ldr	r0, [pc, #108]	; (8002164 <MX_TIM1_Init+0xe0>)
 80020f8:	f004 f946 	bl	8006388 <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002102:	f000 faeb 	bl	80026dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002106:	4817      	ldr	r0, [pc, #92]	; (8002164 <MX_TIM1_Init+0xe0>)
 8002108:	f003 fc22 	bl	8005950 <HAL_TIM_IC_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002112:	f000 fae3 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4619      	mov	r1, r3
 8002124:	480f      	ldr	r0, [pc, #60]	; (8002164 <MX_TIM1_Init+0xe0>)
 8002126:	f004 fe93 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8002130:	f000 fad4 	bl	80026dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002134:	2300      	movs	r3, #0
 8002136:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002138:	2301      	movs	r3, #1
 800213a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002144:	463b      	mov	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <MX_TIM1_Init+0xe0>)
 800214c:	f003 ffbe 	bl	80060cc <HAL_TIM_IC_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002156:	f000 fac1 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000194 	.word	0x20000194
 8002168:	40010000 	.word	0x40010000

0800216c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f004 ff18 	bl	8006fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MX_TIM2_Init+0xa4>)
 800218a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800218e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002190:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <MX_TIM2_Init+0xa4>)
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <MX_TIM2_Init+0xa4>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <MX_TIM2_Init+0xa4>)
 800219e:	f04f 32ff 	mov.w	r2, #4294967295
 80021a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_TIM2_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <MX_TIM2_Init+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021b0:	2303      	movs	r3, #3
 80021b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021b8:	2301      	movs	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021c8:	2301      	movs	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4619      	mov	r1, r3
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <MX_TIM2_Init+0xa4>)
 80021dc:	f003 fd3a 	bl	8005c54 <HAL_TIM_Encoder_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021e6:	f000 fa79 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4806      	ldr	r0, [pc, #24]	; (8002210 <MX_TIM2_Init+0xa4>)
 80021f8:	f004 fe2a 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002202:	f000 fa6b 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200001dc 	.word	0x200001dc

08002214 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
 8002240:	615a      	str	r2, [r3, #20]
 8002242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <MX_TIM3_Init+0xe4>)
 8002246:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <MX_TIM3_Init+0xe8>)
 8002248:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <MX_TIM3_Init+0xe4>)
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <MX_TIM3_Init+0xe4>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <MX_TIM3_Init+0xe4>)
 8002258:	f240 32e7 	movw	r2, #999	; 0x3e7
 800225c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <MX_TIM3_Init+0xe4>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <MX_TIM3_Init+0xe4>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800226a:	4823      	ldr	r0, [pc, #140]	; (80022f8 <MX_TIM3_Init+0xe4>)
 800226c:	f003 f960 	bl	8005530 <HAL_TIM_Base_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002276:	f000 fa31 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002284:	4619      	mov	r1, r3
 8002286:	481c      	ldr	r0, [pc, #112]	; (80022f8 <MX_TIM3_Init+0xe4>)
 8002288:	f004 f87e 	bl	8006388 <HAL_TIM_ConfigClockSource>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002292:	f000 fa23 	bl	80026dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002296:	4818      	ldr	r0, [pc, #96]	; (80022f8 <MX_TIM3_Init+0xe4>)
 8002298:	f003 fa39 	bl	800570e <HAL_TIM_PWM_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022a2:	f000 fa1b 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ae:	f107 0320 	add.w	r3, r7, #32
 80022b2:	4619      	mov	r1, r3
 80022b4:	4810      	ldr	r0, [pc, #64]	; (80022f8 <MX_TIM3_Init+0xe4>)
 80022b6:	f004 fdcb 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022c0:	f000 fa0c 	bl	80026dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c4:	2360      	movs	r3, #96	; 0x60
 80022c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2200      	movs	r2, #0
 80022d8:	4619      	mov	r1, r3
 80022da:	4807      	ldr	r0, [pc, #28]	; (80022f8 <MX_TIM3_Init+0xe4>)
 80022dc:	f003 ff92 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022e6:	f000 f9f9 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022ea:	4803      	ldr	r0, [pc, #12]	; (80022f8 <MX_TIM3_Init+0xe4>)
 80022ec:	f000 fbea 	bl	8002ac4 <HAL_TIM_MspPostInit>

}
 80022f0:	bf00      	nop
 80022f2:	3738      	adds	r7, #56	; 0x38
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000224 	.word	0x20000224
 80022fc:	40000400 	.word	0x40000400

08002300 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	463b      	mov	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <MX_TIM4_Init+0x94>)
 800231e:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <MX_TIM4_Init+0x98>)
 8002320:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <MX_TIM4_Init+0x94>)
 8002324:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002328:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <MX_TIM4_Init+0x94>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 120-1;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <MX_TIM4_Init+0x94>)
 8002332:	2277      	movs	r2, #119	; 0x77
 8002334:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <MX_TIM4_Init+0x94>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <MX_TIM4_Init+0x94>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002342:	4814      	ldr	r0, [pc, #80]	; (8002394 <MX_TIM4_Init+0x94>)
 8002344:	f003 f8f4 	bl	8005530 <HAL_TIM_Base_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800234e:	f000 f9c5 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	4619      	mov	r1, r3
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <MX_TIM4_Init+0x94>)
 8002360:	f004 f812 	bl	8006388 <HAL_TIM_ConfigClockSource>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800236a:	f000 f9b7 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002376:	463b      	mov	r3, r7
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <MX_TIM4_Init+0x94>)
 800237c:	f004 fd68 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002386:	f000 f9a9 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000026c 	.word	0x2000026c
 8002398:	40000800 	.word	0x40000800

0800239c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	463b      	mov	r3, r7
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <MX_TIM5_Init+0x94>)
 80023ba:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <MX_TIM5_Init+0x98>)
 80023bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50000-1;
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <MX_TIM5_Init+0x94>)
 80023c0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80023c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <MX_TIM5_Init+0x94>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <MX_TIM5_Init+0x94>)
 80023ce:	2263      	movs	r2, #99	; 0x63
 80023d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <MX_TIM5_Init+0x94>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <MX_TIM5_Init+0x94>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023de:	4814      	ldr	r0, [pc, #80]	; (8002430 <MX_TIM5_Init+0x94>)
 80023e0:	f003 f8a6 	bl	8005530 <HAL_TIM_Base_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80023ea:	f000 f977 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	480d      	ldr	r0, [pc, #52]	; (8002430 <MX_TIM5_Init+0x94>)
 80023fc:	f003 ffc4 	bl	8006388 <HAL_TIM_ConfigClockSource>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002406:	f000 f969 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002412:	463b      	mov	r3, r7
 8002414:	4619      	mov	r1, r3
 8002416:	4806      	ldr	r0, [pc, #24]	; (8002430 <MX_TIM5_Init+0x94>)
 8002418:	f004 fd1a 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002422:	f000 f95b 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200002b4 	.word	0x200002b4
 8002434:	40000c00 	.word	0x40000c00

08002438 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243e:	463b      	mov	r3, r7
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <MX_TIM6_Init+0x64>)
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <MX_TIM6_Init+0x68>)
 800244a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50000-1;
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_TIM6_Init+0x64>)
 800244e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002452:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_TIM6_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 450-1;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_TIM6_Init+0x64>)
 800245c:	f240 12c1 	movw	r2, #449	; 0x1c1
 8002460:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_TIM6_Init+0x64>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <MX_TIM6_Init+0x64>)
 800246a:	f003 f861 	bl	8005530 <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002474:	f000 f932 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002480:	463b      	mov	r3, r7
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_TIM6_Init+0x64>)
 8002486:	f004 fce3 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002490:	f000 f924 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200002fc 	.word	0x200002fc
 80024a0:	40001000 	.word	0x40001000

080024a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_DMA_Init+0x3c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <MX_DMA_Init+0x3c>)
 80024b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_DMA_Init+0x3c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	2038      	movs	r0, #56	; 0x38
 80024cc:	f001 f9b9 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024d0:	2038      	movs	r0, #56	; 0x38
 80024d2:	f001 f9d2 	bl	800387a <HAL_NVIC_EnableIRQ>

}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a71      	ldr	r2, [pc, #452]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002504:	f043 0310 	orr.w	r3, r3, #16
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b6b      	ldr	r3, [pc, #428]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a6a      	ldr	r2, [pc, #424]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 800253c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a5c      	ldr	r2, [pc, #368]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <MX_GPIO_Init+0x1e4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGINE_CONTROL_GPIO_Port, ENGINE_CONTROL_Pin, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	4850      	ldr	r0, [pc, #320]	; (80026cc <MX_GPIO_Init+0x1e8>)
 800258c:	f001 feb4 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KY_SIGNAL_GPIO_Port, KY_SIGNAL_Pin, GPIO_PIN_RESET);
 8002590:	2200      	movs	r2, #0
 8002592:	2102      	movs	r1, #2
 8002594:	484e      	ldr	r0, [pc, #312]	; (80026d0 <MX_GPIO_Init+0x1ec>)
 8002596:	f001 feaf 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDSTAT_Pin|TRIGGER_Pin, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80025a0:	484c      	ldr	r0, [pc, #304]	; (80026d4 <MX_GPIO_Init+0x1f0>)
 80025a2:	f001 fea9 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Set_Pin Speed_Increase_Pin Speed_Decrease_Pin StopControl_Pin
                           StopControl2_Pin */
  GPIO_InitStruct.Pin = Set_Pin|Speed_Increase_Pin|Speed_Decrease_Pin|StopControl_Pin
 80025a6:	f241 4370 	movw	r3, #5232	; 0x1470
 80025aa:	617b      	str	r3, [r7, #20]
                          |StopControl2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4845      	ldr	r0, [pc, #276]	; (80026d4 <MX_GPIO_Init+0x1f0>)
 80025be:	f001 fce7 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gap_Increase_Pin Gap_Decrease_Pin AdaptiveCruiseControl_Pin Engine_Status_Pin
                           CruiseControl_Pin */
  GPIO_InitStruct.Pin = Gap_Increase_Pin|Gap_Decrease_Pin|AdaptiveCruiseControl_Pin|Engine_Status_Pin
 80025c2:	f242 030f 	movw	r3, #8207	; 0x200f
 80025c6:	617b      	str	r3, [r7, #20]
                          |CruiseControl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	483f      	ldr	r0, [pc, #252]	; (80026d8 <MX_GPIO_Init+0x1f4>)
 80025da:	f001 fcd9 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENGINE_CONTROL_Pin */
  GPIO_InitStruct.Pin = ENGINE_CONTROL_Pin;
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENGINE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	4835      	ldr	r0, [pc, #212]	; (80026cc <MX_GPIO_Init+0x1e8>)
 80025f6:	f001 fccb 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : KY_SIGNAL_Pin */
  GPIO_InitStruct.Pin = KY_SIGNAL_Pin;
 80025fa:	2302      	movs	r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002602:	2302      	movs	r3, #2
 8002604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KY_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	482f      	ldr	r0, [pc, #188]	; (80026d0 <MX_GPIO_Init+0x1ec>)
 8002612:	f001 fcbd 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDSTAT_Pin */
  GPIO_InitStruct.Pin = LEDSTAT_Pin;
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261a:	2301      	movs	r3, #1
 800261c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261e:	2301      	movs	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDSTAT_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4829      	ldr	r0, [pc, #164]	; (80026d4 <MX_GPIO_Init+0x1f0>)
 800262e:	f001 fcaf 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 8002632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	4822      	ldr	r0, [pc, #136]	; (80026d4 <MX_GPIO_Init+0x1f0>)
 800264c:	f001 fca0 	bl	8003f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2101      	movs	r1, #1
 8002654:	2006      	movs	r0, #6
 8002656:	f001 f8f4 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800265a:	2006      	movs	r0, #6
 800265c:	f001 f90d 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2101      	movs	r1, #1
 8002664:	2007      	movs	r0, #7
 8002666:	f001 f8ec 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800266a:	2007      	movs	r0, #7
 800266c:	f001 f905 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2101      	movs	r1, #1
 8002674:	2008      	movs	r0, #8
 8002676:	f001 f8e4 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800267a:	2008      	movs	r0, #8
 800267c:	f001 f8fd 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2101      	movs	r1, #1
 8002684:	2009      	movs	r0, #9
 8002686:	f001 f8dc 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800268a:	2009      	movs	r0, #9
 800268c:	f001 f8f5 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2101      	movs	r1, #1
 8002694:	200a      	movs	r0, #10
 8002696:	f001 f8d4 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800269a:	200a      	movs	r0, #10
 800269c:	f001 f8ed 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2101      	movs	r1, #1
 80026a4:	2017      	movs	r0, #23
 80026a6:	f001 f8cc 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026aa:	2017      	movs	r0, #23
 80026ac:	f001 f8e5 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2101      	movs	r1, #1
 80026b4:	2028      	movs	r0, #40	; 0x28
 80026b6:	f001 f8c4 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026ba:	2028      	movs	r0, #40	; 0x28
 80026bc:	f001 f8dd 	bl	800387a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40020800 	.word	0x40020800

080026dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <Error_Handler+0x8>
	...

080026e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_MspInit+0x4c>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_MspInit+0x4c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2f      	ldr	r2, [pc, #188]	; (8002814 <HAL_ADC_MspInit+0xdc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d157      	bne.n	800280a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <HAL_ADC_MspInit+0xe0>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a2d      	ldr	r2, [pc, #180]	; (8002818 <HAL_ADC_MspInit+0xe0>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_ADC_MspInit+0xe0>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_ADC_MspInit+0xe0>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a26      	ldr	r2, [pc, #152]	; (8002818 <HAL_ADC_MspInit+0xe0>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_ADC_MspInit+0xe0>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002792:	2301      	movs	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002796:	2303      	movs	r3, #3
 8002798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	481d      	ldr	r0, [pc, #116]	; (800281c <HAL_ADC_MspInit+0xe4>)
 80027a6:	f001 fbf3 	bl	8003f90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_ADC_MspInit+0xec>)
 80027ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027ee:	480c      	ldr	r0, [pc, #48]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 80027f0:	f001 f85e 	bl	80038b0 <HAL_DMA_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027fa:	f7ff ff6f 	bl	80026dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
 8002804:	4a06      	ldr	r2, [pc, #24]	; (8002820 <HAL_ADC_MspInit+0xe8>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40012000 	.word	0x40012000
 8002818:	40023800 	.word	0x40023800
 800281c:	40020000 	.word	0x40020000
 8002820:	200000e0 	.word	0x200000e0
 8002824:	40026410 	.word	0x40026410

08002828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_I2C_MspInit+0x84>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12c      	bne.n	80028a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002866:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800286a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286c:	2312      	movs	r3, #18
 800286e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002870:	2301      	movs	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002878:	2304      	movs	r3, #4
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	480c      	ldr	r0, [pc, #48]	; (80028b4 <HAL_I2C_MspInit+0x8c>)
 8002884:	f001 fb84 	bl	8003f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 8002892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40005800 	.word	0x40005800
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020400 	.word	0x40020400

080028b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	; 0x38
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a51      	ldr	r2, [pc, #324]	; (8002a1c <HAL_TIM_Base_MspInit+0x164>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d135      	bne.n	8002946 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b4d      	ldr	r3, [pc, #308]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a48      	ldr	r2, [pc, #288]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 8002900:	f043 0310 	orr.w	r3, r3, #16
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8002912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002924:	2301      	movs	r3, #1
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	483d      	ldr	r0, [pc, #244]	; (8002a24 <HAL_TIM_Base_MspInit+0x16c>)
 8002930:	f001 fb2e 	bl	8003f90 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2100      	movs	r1, #0
 8002938:	201b      	movs	r0, #27
 800293a:	f000 ff82 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800293e:	201b      	movs	r0, #27
 8002940:	f000 ff9b 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002944:	e066      	b.n	8002a14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a37      	ldr	r2, [pc, #220]	; (8002a28 <HAL_TIM_Base_MspInit+0x170>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10e      	bne.n	800296e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69bb      	ldr	r3, [r7, #24]
}
 800296c:	e052      	b.n	8002a14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <HAL_TIM_Base_MspInit+0x174>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d116      	bne.n	80029a6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	4a27      	ldr	r2, [pc, #156]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6413      	str	r3, [r2, #64]	; 0x40
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	201e      	movs	r0, #30
 800299a:	f000 ff52 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800299e:	201e      	movs	r0, #30
 80029a0:	f000 ff6b 	bl	800387a <HAL_NVIC_EnableIRQ>
}
 80029a4:	e036      	b.n	8002a14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a21      	ldr	r2, [pc, #132]	; (8002a30 <HAL_TIM_Base_MspInit+0x178>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d116      	bne.n	80029de <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	2032      	movs	r0, #50	; 0x32
 80029d2:	f000 ff36 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029d6:	2032      	movs	r0, #50	; 0x32
 80029d8:	f000 ff4f 	bl	800387a <HAL_NVIC_EnableIRQ>
}
 80029dc:	e01a      	b.n	8002a14 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM6)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <HAL_TIM_Base_MspInit+0x17c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d115      	bne.n	8002a14 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80029f2:	f043 0310 	orr.w	r3, r3, #16
 80029f6:	6413      	str	r3, [r2, #64]	; 0x40
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_TIM_Base_MspInit+0x168>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2102      	movs	r1, #2
 8002a08:	2036      	movs	r0, #54	; 0x36
 8002a0a:	f000 ff1a 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a0e:	2036      	movs	r0, #54	; 0x36
 8002a10:	f000 ff33 	bl	800387a <HAL_NVIC_EnableIRQ>
}
 8002a14:	bf00      	nop
 8002a16:	3738      	adds	r7, #56	; 0x38
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40000800 	.word	0x40000800
 8002a30:	40000c00 	.word	0x40000c00
 8002a34:	40001000 	.word	0x40001000

08002a38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a58:	d12b      	bne.n	8002ab2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002a92:	2322      	movs	r3, #34	; 0x22
 8002a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002aae:	f001 fa6f 	bl	8003f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <HAL_TIM_MspPostInit+0x68>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d11d      	bne.n	8002b22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_TIM_MspPostInit+0x6c>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_TIM_MspPostInit+0x6c>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_TIM_MspPostInit+0x6c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b02:	2340      	movs	r3, #64	; 0x40
 8002b04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4805      	ldr	r0, [pc, #20]	; (8002b34 <HAL_TIM_MspPostInit+0x70>)
 8002b1e:	f001 fa37 	bl	8003f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b22:	bf00      	nop
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020000 	.word	0x40020000

08002b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <NMI_Handler+0x4>

08002b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b42:	e7fe      	b.n	8002b42 <HardFault_Handler+0x4>

08002b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <MemManage_Handler+0x4>

08002b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b4e:	e7fe      	b.n	8002b4e <BusFault_Handler+0x4>

08002b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <UsageFault_Handler+0x4>

08002b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b84:	f000 f936 	bl	8002df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Gap_Decrease_Pin);
 8002b90:	2001      	movs	r0, #1
 8002b92:	f001 fbe5 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AdaptiveCruiseControl_Pin);
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	f001 fbde 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Engine_Status_Pin);
 8002bac:	2004      	movs	r0, #4
 8002bae:	f001 fbd7 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CruiseControl_Pin);
 8002bba:	2008      	movs	r0, #8
 8002bbc:	f001 fbd0 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Set_Pin);
 8002bc8:	2010      	movs	r0, #16
 8002bca:	f001 fbc9 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Speed_Increase_Pin);
 8002bd6:	2020      	movs	r0, #32
 8002bd8:	f001 fbc2 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Speed_Decrease_Pin);
 8002bdc:	2040      	movs	r0, #64	; 0x40
 8002bde:	f001 fbbf 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <TIM1_CC_IRQHandler+0x10>)
 8002bee:	f003 f965 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000194 	.word	0x20000194

08002bfc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <TIM4_IRQHandler+0x10>)
 8002c02:	f003 f95b 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000026c 	.word	0x2000026c

08002c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(StopControl_Pin);
 8002c14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c18:	f001 fba2 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(StopControl2_Pin);
 8002c1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c20:	f001 fb9e 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Gap_Increase_Pin);
 8002c24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c28:	f001 fb9a 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <TIM5_IRQHandler+0x10>)
 8002c36:	f003 f941 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200002b4 	.word	0x200002b4

08002c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <TIM6_DAC_IRQHandler+0x10>)
 8002c4a:	f003 f937 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200002fc 	.word	0x200002fc

08002c58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <DMA2_Stream0_IRQHandler+0x10>)
 8002c5e:	f000 ff2d 	bl	8003abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200000e0 	.word	0x200000e0

08002c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <_sbrk+0x5c>)
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <_sbrk+0x60>)
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <_sbrk+0x64>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <_sbrk+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d207      	bcs.n	8002cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c9c:	f004 f990 	bl	8006fc0 <__errno>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e009      	b.n	8002cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <_sbrk+0x64>)
 8002cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20020000 	.word	0x20020000
 8002ccc:	00000400 	.word	0x00000400
 8002cd0:	20000384 	.word	0x20000384
 8002cd4:	200004d8 	.word	0x200004d8

08002cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <SystemInit+0x20>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <SystemInit+0x20>)
 8002ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d02:	490e      	ldr	r1, [pc, #56]	; (8002d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d04:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d08:	e002      	b.n	8002d10 <LoopCopyDataInit>

08002d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0e:	3304      	adds	r3, #4

08002d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d14:	d3f9      	bcc.n	8002d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d18:	4c0b      	ldr	r4, [pc, #44]	; (8002d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d1c:	e001      	b.n	8002d22 <LoopFillZerobss>

08002d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d20:	3204      	adds	r2, #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d26:	f7ff ffd7 	bl	8002cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f004 f94f 	bl	8006fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2e:	f7ff f861 	bl	8001df4 <main>
  bx  lr    
 8002d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002d40:	080079d4 	.word	0x080079d4
  ldr r2, =_sbss
 8002d44:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002d48:	200004d4 	.word	0x200004d4

08002d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC_IRQHandler>
	...

08002d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <HAL_Init+0x40>)
 8002d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_Init+0x40>)
 8002d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <HAL_Init+0x40>)
 8002d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d78:	2003      	movs	r0, #3
 8002d7a:	f000 fd57 	bl	800382c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7e:	200f      	movs	r0, #15
 8002d80:	f000 f808 	bl	8002d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d84:	f7ff fcb0 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00

08002d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_InitTick+0x54>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_InitTick+0x58>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4619      	mov	r1, r3
 8002da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fd6f 	bl	8003896 <HAL_SYSTICK_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00e      	b.n	8002de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d80a      	bhi.n	8002dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	f000 fd37 	bl	8003842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd4:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <HAL_InitTick+0x5c>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000010 	.word	0x20000010
 8002dec:	20000018 	.word	0x20000018
 8002df0:	20000014 	.word	0x20000014

08002df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_IncTick+0x20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_IncTick+0x24>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <HAL_IncTick+0x24>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000018 	.word	0x20000018
 8002e18:	20000388 	.word	0x20000388

08002e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <HAL_GetTick+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000388 	.word	0x20000388

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff ffee 	bl	8002e1c <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffde 	bl	8002e1c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000018 	.word	0x20000018

08002e7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e033      	b.n	8002efa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fc4c 	bl	8002738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d118      	bne.n	8002eec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec2:	f023 0302 	bic.w	r3, r3, #2
 8002ec6:	f043 0202 	orr.w	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fa5e 	bl	8003390 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
 8002eea:	e001      	b.n	8002ef0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_Start_DMA+0x1e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0e9      	b.n	80030f6 <HAL_ADC_Start_DMA+0x1f2>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d018      	beq.n	8002f6a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f48:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <HAL_ADC_Start_DMA+0x1fc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6d      	ldr	r2, [pc, #436]	; (8003104 <HAL_ADC_Start_DMA+0x200>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0c9a      	lsrs	r2, r3, #18
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f5c:	e002      	b.n	8002f64 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f9      	bne.n	8002f5e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f78:	d107      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f88:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 80a1 	bne.w	80030dc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd8:	d106      	bne.n	8002fe8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f023 0206 	bic.w	r2, r3, #6
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	645a      	str	r2, [r3, #68]	; 0x44
 8002fe6:	e002      	b.n	8002fee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff6:	4b44      	ldr	r3, [pc, #272]	; (8003108 <HAL_ADC_Start_DMA+0x204>)
 8002ff8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	4a43      	ldr	r2, [pc, #268]	; (800310c <HAL_ADC_Start_DMA+0x208>)
 8003000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	4a42      	ldr	r2, [pc, #264]	; (8003110 <HAL_ADC_Start_DMA+0x20c>)
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	4a41      	ldr	r2, [pc, #260]	; (8003114 <HAL_ADC_Start_DMA+0x210>)
 8003010:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800301a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800302a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800303a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	334c      	adds	r3, #76	; 0x4c
 8003046:	4619      	mov	r1, r3
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f000 fcde 	bl	8003a0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2b00      	cmp	r3, #0
 800305a:	d12a      	bne.n	80030b2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <HAL_ADC_Start_DMA+0x214>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d015      	beq.n	8003092 <HAL_ADC_Start_DMA+0x18e>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <HAL_ADC_Start_DMA+0x218>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d105      	bne.n	800307c <HAL_ADC_Start_DMA+0x178>
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_ADC_Start_DMA+0x204>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <HAL_ADC_Start_DMA+0x21c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d136      	bne.n	80030f4 <HAL_ADC_Start_DMA+0x1f0>
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_ADC_Start_DMA+0x204>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d130      	bne.n	80030f4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d129      	bne.n	80030f4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	e020      	b.n	80030f4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a18      	ldr	r2, [pc, #96]	; (8003118 <HAL_ADC_Start_DMA+0x214>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d11b      	bne.n	80030f4 <HAL_ADC_Start_DMA+0x1f0>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d114      	bne.n	80030f4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	e00b      	b.n	80030f4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0210 	orr.w	r2, r3, #16
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000010 	.word	0x20000010
 8003104:	431bde83 	.word	0x431bde83
 8003108:	40012300 	.word	0x40012300
 800310c:	08003589 	.word	0x08003589
 8003110:	08003643 	.word	0x08003643
 8003114:	0800365f 	.word	0x0800365f
 8003118:	40012000 	.word	0x40012000
 800311c:	40012100 	.word	0x40012100
 8003120:	40012200 	.word	0x40012200

08003124 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x1c>
 8003164:	2302      	movs	r3, #2
 8003166:	e105      	b.n	8003374 <HAL_ADC_ConfigChannel+0x228>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b09      	cmp	r3, #9
 8003176:	d925      	bls.n	80031c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	3b1e      	subs	r3, #30
 800318e:	2207      	movs	r2, #7
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43da      	mvns	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	400a      	ands	r2, r1
 800319c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68d9      	ldr	r1, [r3, #12]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	4603      	mov	r3, r0
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4403      	add	r3, r0
 80031b6:	3b1e      	subs	r3, #30
 80031b8:	409a      	lsls	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	e022      	b.n	800320a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6919      	ldr	r1, [r3, #16]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	2207      	movs	r2, #7
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	400a      	ands	r2, r1
 80031e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6919      	ldr	r1, [r3, #16]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4618      	mov	r0, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4403      	add	r3, r0
 8003200:	409a      	lsls	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b06      	cmp	r3, #6
 8003210:	d824      	bhi.n	800325c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	3b05      	subs	r3, #5
 8003224:	221f      	movs	r2, #31
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	400a      	ands	r2, r1
 8003232:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	4618      	mov	r0, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b05      	subs	r3, #5
 800324e:	fa00 f203 	lsl.w	r2, r0, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	635a      	str	r2, [r3, #52]	; 0x34
 800325a:	e04c      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d824      	bhi.n	80032ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b23      	subs	r3, #35	; 0x23
 8003276:	221f      	movs	r2, #31
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43da      	mvns	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	400a      	ands	r2, r1
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3b23      	subs	r3, #35	; 0x23
 80032a0:	fa00 f203 	lsl.w	r2, r0, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
 80032ac:	e023      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	3b41      	subs	r3, #65	; 0x41
 80032c0:	221f      	movs	r2, #31
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	3b41      	subs	r3, #65	; 0x41
 80032ea:	fa00 f203 	lsl.w	r2, r0, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_ADC_ConfigChannel+0x234>)
 80032f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a21      	ldr	r2, [pc, #132]	; (8003384 <HAL_ADC_ConfigChannel+0x238>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d109      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x1cc>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b12      	cmp	r3, #18
 800330a:	d105      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_ADC_ConfigChannel+0x238>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d123      	bne.n	800336a <HAL_ADC_ConfigChannel+0x21e>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d003      	beq.n	8003332 <HAL_ADC_ConfigChannel+0x1e6>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b11      	cmp	r3, #17
 8003330:	d11b      	bne.n	800336a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b10      	cmp	r3, #16
 8003344:	d111      	bne.n	800336a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_ADC_ConfigChannel+0x23c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <HAL_ADC_ConfigChannel+0x240>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	0c9a      	lsrs	r2, r3, #18
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800335c:	e002      	b.n	8003364 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3b01      	subs	r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f9      	bne.n	800335e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40012300 	.word	0x40012300
 8003384:	40012000 	.word	0x40012000
 8003388:	20000010 	.word	0x20000010
 800338c:	431bde83 	.word	0x431bde83

08003390 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003398:	4b79      	ldr	r3, [pc, #484]	; (8003580 <ADC_Init+0x1f0>)
 800339a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	021a      	lsls	r2, r3, #8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	4a58      	ldr	r2, [pc, #352]	; (8003584 <ADC_Init+0x1f4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d022      	beq.n	800346e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003436:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6899      	ldr	r1, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6899      	ldr	r1, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	e00f      	b.n	800348e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800347c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800348c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0202 	bic.w	r2, r2, #2
 800349c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6899      	ldr	r1, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7e1b      	ldrb	r3, [r3, #24]
 80034a8:	005a      	lsls	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	3b01      	subs	r3, #1
 80034e8:	035a      	lsls	r2, r3, #13
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	e007      	b.n	8003504 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003502:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	3b01      	subs	r3, #1
 8003520:	051a      	lsls	r2, r3, #20
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6899      	ldr	r1, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003546:	025a      	lsls	r2, r3, #9
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	029a      	lsls	r2, r3, #10
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40012300 	.word	0x40012300
 8003584:	0f000001 	.word	0x0f000001

08003588 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d13c      	bne.n	800361c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d12b      	bne.n	8003614 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d127      	bne.n	8003614 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d119      	bne.n	8003614 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0220 	bic.w	r2, r2, #32
 80035ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7fd fe05 	bl	8001224 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800361a:	e00e      	b.n	800363a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff fd85 	bl	8003138 <HAL_ADC_ErrorCallback>
}
 800362e:	e004      	b.n	800363a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fd67 	bl	8003124 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f043 0204 	orr.w	r2, r3, #4
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff fd5a 	bl	8003138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	60d3      	str	r3, [r2, #12]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <__NVIC_GetPriorityGrouping+0x18>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 0307 	and.w	r3, r3, #7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db0b      	blt.n	800371a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <__NVIC_EnableIRQ+0x38>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f8:	d301      	bcc.n	80037fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00f      	b.n	800381e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <SysTick_Config+0x40>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003806:	210f      	movs	r1, #15
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	f7ff ff8e 	bl	800372c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SysTick_Config+0x40>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SysTick_Config+0x40>)
 8003818:	2207      	movs	r2, #7
 800381a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010

0800382c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff29 	bl	800368c <__NVIC_SetPriorityGrouping>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003854:	f7ff ff3e 	bl	80036d4 <__NVIC_GetPriorityGrouping>
 8003858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff ff8e 	bl	8003780 <NVIC_EncodePriority>
 8003864:	4602      	mov	r2, r0
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff5d 	bl	800372c <__NVIC_SetPriority>
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff31 	bl	80036f0 <__NVIC_EnableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ffa2 	bl	80037e8 <SysTick_Config>
 80038a4:	4603      	mov	r3, r0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff faae 	bl	8002e1c <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e099      	b.n	8003a00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ec:	e00f      	b.n	800390e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ee:	f7ff fa95 	bl	8002e1c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d908      	bls.n	800390e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2203      	movs	r2, #3
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e078      	b.n	8003a00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e8      	bne.n	80038ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4b38      	ldr	r3, [pc, #224]	; (8003a08 <HAL_DMA_Init+0x158>)
 8003928:	4013      	ands	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800393a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2b04      	cmp	r3, #4
 8003966:	d107      	bne.n	8003978 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	4313      	orrs	r3, r2
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0307 	bic.w	r3, r3, #7
 800398e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d117      	bne.n	80039d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00e      	beq.n	80039d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fa6f 	bl	8003e98 <DMA_CheckFifoParam>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2240      	movs	r2, #64	; 0x40
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039ce:	2301      	movs	r3, #1
 80039d0:	e016      	b.n	8003a00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa26 	bl	8003e2c <DMA_CalcBaseAndBitshift>
 80039e0:	4603      	mov	r3, r0
 80039e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	223f      	movs	r2, #63	; 0x3f
 80039ea:	409a      	lsls	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	f010803f 	.word	0xf010803f

08003a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_DMA_Start_IT+0x26>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e040      	b.n	8003ab4 <HAL_DMA_Start_IT+0xa8>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d12f      	bne.n	8003aa6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f9b8 	bl	8003dd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	223f      	movs	r2, #63	; 0x3f
 8003a66:	409a      	lsls	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0216 	orr.w	r2, r2, #22
 8003a7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0208 	orr.w	r2, r2, #8
 8003a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e005      	b.n	8003ab2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ac8:	4b8e      	ldr	r3, [pc, #568]	; (8003d04 <HAL_DMA_IRQHandler+0x248>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a8e      	ldr	r2, [pc, #568]	; (8003d08 <HAL_DMA_IRQHandler+0x24c>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0a9b      	lsrs	r3, r3, #10
 8003ad4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d01a      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	2208      	movs	r2, #8
 8003b16:	409a      	lsls	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d012      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2204      	movs	r2, #4
 8003b64:	409a      	lsls	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d012      	beq.n	8003b94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	2204      	movs	r2, #4
 8003b82:	409a      	lsls	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	f043 0204 	orr.w	r2, r3, #4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	2210      	movs	r2, #16
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d043      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03c      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d018      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d024      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
 8003bea:	e01f      	b.n	8003c2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
 8003bfc:	e016      	b.n	8003c2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0208 	bic.w	r2, r2, #8
 8003c1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	2220      	movs	r2, #32
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 808f 	beq.w	8003d5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8087 	beq.w	8003d5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c52:	2220      	movs	r2, #32
 8003c54:	409a      	lsls	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d136      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0216 	bic.w	r2, r2, #22
 8003c74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <HAL_DMA_IRQHandler+0x1da>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0208 	bic.w	r2, r2, #8
 8003ca4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	223f      	movs	r2, #63	; 0x3f
 8003cac:	409a      	lsls	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d07e      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
        }
        return;
 8003cd2:	e079      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10d      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d031      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
 8003d00:	e02c      	b.n	8003d5c <HAL_DMA_IRQHandler+0x2a0>
 8003d02:	bf00      	nop
 8003d04:	20000010 	.word	0x20000010
 8003d08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d023      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
 8003d1c:	e01e      	b.n	8003d5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10f      	bne.n	8003d4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0210 	bic.w	r2, r2, #16
 8003d3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d032      	beq.n	8003dca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d022      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2205      	movs	r2, #5
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d307      	bcc.n	8003da4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f2      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x2cc>
 8003da2:	e000      	b.n	8003da6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003da4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_IRQHandler+0x30e>
        return;
 8003dc8:	bf00      	nop
    }
  }
}
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d108      	bne.n	8003e10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e0e:	e007      	b.n	8003e20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3b10      	subs	r3, #16
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <DMA_CalcBaseAndBitshift+0x64>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <DMA_CalcBaseAndBitshift+0x68>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d909      	bls.n	8003e6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e6c:	e007      	b.n	8003e7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	aaaaaaab 	.word	0xaaaaaaab
 8003e94:	08007988 	.word	0x08007988

08003e98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11f      	bne.n	8003ef2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d856      	bhi.n	8003f66 <DMA_CheckFifoParam+0xce>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <DMA_CheckFifoParam+0x28>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ee3 	.word	0x08003ee3
 8003ec8:	08003ed1 	.word	0x08003ed1
 8003ecc:	08003f67 	.word	0x08003f67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d046      	beq.n	8003f6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee0:	e043      	b.n	8003f6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eea:	d140      	bne.n	8003f6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef0:	e03d      	b.n	8003f6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efa:	d121      	bne.n	8003f40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d837      	bhi.n	8003f72 <DMA_CheckFifoParam+0xda>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <DMA_CheckFifoParam+0x70>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f1f 	.word	0x08003f1f
 8003f10:	08003f19 	.word	0x08003f19
 8003f14:	08003f31 	.word	0x08003f31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1c:	e030      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d025      	beq.n	8003f76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2e:	e022      	b.n	8003f76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f38:	d11f      	bne.n	8003f7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f3e:	e01c      	b.n	8003f7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d903      	bls.n	8003f4e <DMA_CheckFifoParam+0xb6>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d003      	beq.n	8003f54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f4c:	e018      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      break;
 8003f52:	e015      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e00b      	b.n	8003f7e <DMA_CheckFifoParam+0xe6>
      break;
 8003f66:	bf00      	nop
 8003f68:	e00a      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e008      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e006      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f72:	bf00      	nop
 8003f74:	e004      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop

08003f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e16b      	b.n	8004284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fac:	2201      	movs	r2, #1
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f040 815a 	bne.w	800427e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d005      	beq.n	8003fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d130      	bne.n	8004044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2203      	movs	r2, #3
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 0201 	and.w	r2, r3, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b03      	cmp	r3, #3
 800404e:	d017      	beq.n	8004080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d123      	bne.n	80040d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	69b9      	ldr	r1, [r7, #24]
 80040d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0203 	and.w	r2, r3, #3
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80b4 	beq.w	800427e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	4b60      	ldr	r3, [pc, #384]	; (800429c <HAL_GPIO_Init+0x30c>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	4a5f      	ldr	r2, [pc, #380]	; (800429c <HAL_GPIO_Init+0x30c>)
 8004120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004124:	6453      	str	r3, [r2, #68]	; 0x44
 8004126:	4b5d      	ldr	r3, [pc, #372]	; (800429c <HAL_GPIO_Init+0x30c>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004132:	4a5b      	ldr	r2, [pc, #364]	; (80042a0 <HAL_GPIO_Init+0x310>)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	3302      	adds	r3, #2
 800413a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	220f      	movs	r2, #15
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a52      	ldr	r2, [pc, #328]	; (80042a4 <HAL_GPIO_Init+0x314>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02b      	beq.n	80041b6 <HAL_GPIO_Init+0x226>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a51      	ldr	r2, [pc, #324]	; (80042a8 <HAL_GPIO_Init+0x318>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d025      	beq.n	80041b2 <HAL_GPIO_Init+0x222>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a50      	ldr	r2, [pc, #320]	; (80042ac <HAL_GPIO_Init+0x31c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01f      	beq.n	80041ae <HAL_GPIO_Init+0x21e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a4f      	ldr	r2, [pc, #316]	; (80042b0 <HAL_GPIO_Init+0x320>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d019      	beq.n	80041aa <HAL_GPIO_Init+0x21a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4e      	ldr	r2, [pc, #312]	; (80042b4 <HAL_GPIO_Init+0x324>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_GPIO_Init+0x216>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4d      	ldr	r2, [pc, #308]	; (80042b8 <HAL_GPIO_Init+0x328>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00d      	beq.n	80041a2 <HAL_GPIO_Init+0x212>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4c      	ldr	r2, [pc, #304]	; (80042bc <HAL_GPIO_Init+0x32c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <HAL_GPIO_Init+0x20e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4b      	ldr	r2, [pc, #300]	; (80042c0 <HAL_GPIO_Init+0x330>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_GPIO_Init+0x20a>
 8004196:	2307      	movs	r3, #7
 8004198:	e00e      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 800419a:	2308      	movs	r3, #8
 800419c:	e00c      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 800419e:	2306      	movs	r3, #6
 80041a0:	e00a      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041a2:	2305      	movs	r3, #5
 80041a4:	e008      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041a6:	2304      	movs	r3, #4
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041aa:	2303      	movs	r3, #3
 80041ac:	e004      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e002      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041b6:	2300      	movs	r3, #0
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	f002 0203 	and.w	r2, r2, #3
 80041be:	0092      	lsls	r2, r2, #2
 80041c0:	4093      	lsls	r3, r2
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c8:	4935      	ldr	r1, [pc, #212]	; (80042a0 <HAL_GPIO_Init+0x310>)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	3302      	adds	r3, #2
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041d6:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_GPIO_Init+0x334>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041fa:	4a32      	ldr	r2, [pc, #200]	; (80042c4 <HAL_GPIO_Init+0x334>)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004200:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <HAL_GPIO_Init+0x334>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004224:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <HAL_GPIO_Init+0x334>)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <HAL_GPIO_Init+0x334>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800424e:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_GPIO_Init+0x334>)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_GPIO_Init+0x334>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004278:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <HAL_GPIO_Init+0x334>)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3301      	adds	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	f67f ae90 	bls.w	8003fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	40013800 	.word	0x40013800
 80042a4:	40020000 	.word	0x40020000
 80042a8:	40020400 	.word	0x40020400
 80042ac:	40020800 	.word	0x40020800
 80042b0:	40020c00 	.word	0x40020c00
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40021400 	.word	0x40021400
 80042bc:	40021800 	.word	0x40021800
 80042c0:	40021c00 	.word	0x40021c00
 80042c4:	40013c00 	.word	0x40013c00

080042c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	887b      	ldrh	r3, [r7, #2]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	e001      	b.n	80042ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004314:	e003      	b.n	800431e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	041a      	lsls	r2, r3, #16
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43d9      	mvns	r1, r3
 8004348:	887b      	ldrh	r3, [r7, #2]
 800434a:	400b      	ands	r3, r1
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	619a      	str	r2, [r3, #24]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004376:	4a05      	ldr	r2, [pc, #20]	; (800438c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fb26 	bl	80019d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e12b      	b.n	80045fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fe fa36 	bl	8002828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043f4:	f001 f888 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 80043f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a81      	ldr	r2, [pc, #516]	; (8004604 <HAL_I2C_Init+0x274>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d807      	bhi.n	8004414 <HAL_I2C_Init+0x84>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a80      	ldr	r2, [pc, #512]	; (8004608 <HAL_I2C_Init+0x278>)
 8004408:	4293      	cmp	r3, r2
 800440a:	bf94      	ite	ls
 800440c:	2301      	movls	r3, #1
 800440e:	2300      	movhi	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e006      	b.n	8004422 <HAL_I2C_Init+0x92>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a7d      	ldr	r2, [pc, #500]	; (800460c <HAL_I2C_Init+0x27c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	bf94      	ite	ls
 800441c:	2301      	movls	r3, #1
 800441e:	2300      	movhi	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0e7      	b.n	80045fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a78      	ldr	r2, [pc, #480]	; (8004610 <HAL_I2C_Init+0x280>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0c9b      	lsrs	r3, r3, #18
 8004434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a6a      	ldr	r2, [pc, #424]	; (8004604 <HAL_I2C_Init+0x274>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d802      	bhi.n	8004464 <HAL_I2C_Init+0xd4>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3301      	adds	r3, #1
 8004462:	e009      	b.n	8004478 <HAL_I2C_Init+0xe8>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	4a69      	ldr	r2, [pc, #420]	; (8004614 <HAL_I2C_Init+0x284>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	3301      	adds	r3, #1
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	430b      	orrs	r3, r1
 800447e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800448a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	495c      	ldr	r1, [pc, #368]	; (8004604 <HAL_I2C_Init+0x274>)
 8004494:	428b      	cmp	r3, r1
 8004496:	d819      	bhi.n	80044cc <HAL_I2C_Init+0x13c>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1e59      	subs	r1, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a6:	1c59      	adds	r1, r3, #1
 80044a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044ac:	400b      	ands	r3, r1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_I2C_Init+0x138>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1e59      	subs	r1, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c6:	e051      	b.n	800456c <HAL_I2C_Init+0x1dc>
 80044c8:	2304      	movs	r3, #4
 80044ca:	e04f      	b.n	800456c <HAL_I2C_Init+0x1dc>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d111      	bne.n	80044f8 <HAL_I2C_Init+0x168>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1e58      	subs	r0, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	440b      	add	r3, r1
 80044e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e012      	b.n	800451e <HAL_I2C_Init+0x18e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1e58      	subs	r0, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	0099      	lsls	r1, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	fbb0 f3f3 	udiv	r3, r0, r3
 800450e:	3301      	adds	r3, #1
 8004510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Init+0x196>
 8004522:	2301      	movs	r3, #1
 8004524:	e022      	b.n	800456c <HAL_I2C_Init+0x1dc>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10e      	bne.n	800454c <HAL_I2C_Init+0x1bc>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1e58      	subs	r0, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	440b      	add	r3, r1
 800453c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004540:	3301      	adds	r3, #1
 8004542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	e00f      	b.n	800456c <HAL_I2C_Init+0x1dc>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1e58      	subs	r0, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	0099      	lsls	r1, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	6809      	ldr	r1, [r1, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800459a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6911      	ldr	r1, [r2, #16]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68d2      	ldr	r2, [r2, #12]
 80045a6:	4311      	orrs	r1, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	000186a0 	.word	0x000186a0
 8004608:	001e847f 	.word	0x001e847f
 800460c:	003d08ff 	.word	0x003d08ff
 8004610:	431bde83 	.word	0x431bde83
 8004614:	10624dd3 	.word	0x10624dd3

08004618 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	460b      	mov	r3, r1
 8004626:	817b      	strh	r3, [r7, #10]
 8004628:	4613      	mov	r3, r2
 800462a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800462c:	f7fe fbf6 	bl	8002e1c <HAL_GetTick>
 8004630:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b20      	cmp	r3, #32
 800463c:	f040 80e0 	bne.w	8004800 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2319      	movs	r3, #25
 8004646:	2201      	movs	r2, #1
 8004648:	4970      	ldr	r1, [pc, #448]	; (800480c <HAL_I2C_Master_Transmit+0x1f4>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f964 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
 8004658:	e0d3      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_I2C_Master_Transmit+0x50>
 8004664:	2302      	movs	r3, #2
 8004666:	e0cc      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b01      	cmp	r3, #1
 800467c:	d007      	beq.n	800468e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800469c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2221      	movs	r2, #33	; 0x21
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2210      	movs	r2, #16
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	893a      	ldrh	r2, [r7, #8]
 80046be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a50      	ldr	r2, [pc, #320]	; (8004810 <HAL_I2C_Master_Transmit+0x1f8>)
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046d0:	8979      	ldrh	r1, [r7, #10]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6a3a      	ldr	r2, [r7, #32]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f89c 	bl	8004814 <I2C_MasterRequestWrite>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e08d      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80046fc:	e066      	b.n	80047cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	6a39      	ldr	r1, [r7, #32]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f9de 	bl	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00d      	beq.n	800472a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2b04      	cmp	r3, #4
 8004714:	d107      	bne.n	8004726 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06b      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d11b      	bne.n	80047a0 <HAL_I2C_Master_Transmit+0x188>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d017      	beq.n	80047a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	6a39      	ldr	r1, [r7, #32]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f9ce 	bl	8004b46 <I2C_WaitOnBTFFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d107      	bne.n	80047c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e01a      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d194      	bne.n	80046fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	00100002 	.word	0x00100002
 8004810:	ffff0000 	.word	0xffff0000

08004814 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	460b      	mov	r3, r1
 8004822:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d006      	beq.n	800483e <I2C_MasterRequestWrite+0x2a>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <I2C_MasterRequestWrite+0x2a>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e00b      	b.n	8004868 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b12      	cmp	r3, #18
 8004856:	d107      	bne.n	8004868 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004866:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f84f 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488e:	d103      	bne.n	8004898 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e035      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a4:	d108      	bne.n	80048b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	e01b      	b.n	80048f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	11db      	asrs	r3, r3, #7
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0306 	and.w	r3, r3, #6
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f063 030f 	orn	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <I2C_MasterRequestWrite+0xfc>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f875 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e010      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4907      	ldr	r1, [pc, #28]	; (8004914 <I2C_MasterRequestWrite+0x100>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f865 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	00010008 	.word	0x00010008
 8004914:	00010002 	.word	0x00010002

08004918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004928:	e025      	b.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d021      	beq.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fe fa73 	bl	8002e1c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e023      	b.n	80049be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10d      	bne.n	800499c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	43da      	mvns	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	e00c      	b.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d0b6      	beq.n	800492a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d4:	e051      	b.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d123      	bne.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0204 	orr.w	r2, r3, #4
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e046      	b.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d021      	beq.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe f9f1 	bl	8002e1c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e020      	b.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10c      	bne.n	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf14      	ite	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	2300      	moveq	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e00b      	b.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	43da      	mvns	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d18d      	bne.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad0:	e02d      	b.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f878 	bl	8004bc8 <I2C_IsAcknowledgeFailed>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e02d      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d021      	beq.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fe f997 	bl	8002e1c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e007      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d1ca      	bne.n	8004ad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b52:	e02d      	b.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f837 	bl	8004bc8 <I2C_IsAcknowledgeFailed>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e02d      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d021      	beq.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7fe f956 	bl	8002e1c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d116      	bne.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d1ca      	bne.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bde:	d11b      	bne.n	8004c18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004be8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f043 0204 	orr.w	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e267      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d075      	beq.n	8004d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c46:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d00c      	beq.n	8004c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c52:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d112      	bne.n	8004c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5e:	4b82      	ldr	r3, [pc, #520]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	4b7e      	ldr	r3, [pc, #504]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05b      	beq.n	8004d30 <HAL_RCC_OscConfig+0x108>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d157      	bne.n	8004d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e242      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCC_OscConfig+0x74>
 8004c8e:	4b76      	ldr	r3, [pc, #472]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a75      	ldr	r2, [pc, #468]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e01d      	b.n	8004cd8 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x98>
 8004ca6:	4b70      	ldr	r3, [pc, #448]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6f      	ldr	r2, [pc, #444]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4b6d      	ldr	r3, [pc, #436]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a6c      	ldr	r2, [pc, #432]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e00b      	b.n	8004cd8 <HAL_RCC_OscConfig+0xb0>
 8004cc0:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a68      	ldr	r2, [pc, #416]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	4b66      	ldr	r3, [pc, #408]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a65      	ldr	r2, [pc, #404]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fe f89c 	bl	8002e1c <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fe f898 	bl	8002e1c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	; 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e207      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xc0>
 8004d06:	e014      	b.n	8004d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fe f888 	bl	8002e1c <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d10:	f7fe f884 	bl	8002e1c <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e1f3      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0xe8>
 8004d2e:	e000      	b.n	8004d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d063      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d3e:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00b      	beq.n	8004d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4a:	4b47      	ldr	r3, [pc, #284]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d11c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d56:	4b44      	ldr	r3, [pc, #272]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d116      	bne.n	8004d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d62:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_RCC_OscConfig+0x152>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d001      	beq.n	8004d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e1c7      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7a:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4937      	ldr	r1, [pc, #220]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	e03a      	b.n	8004e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d020      	beq.n	8004dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d98:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <HAL_RCC_OscConfig+0x244>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fe f83d 	bl	8002e1c <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da6:	f7fe f839 	bl	8002e1c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e1a8      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc4:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4925      	ldr	r1, [pc, #148]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]
 8004dd8:	e015      	b.n	8004e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_RCC_OscConfig+0x244>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fe f81c 	bl	8002e1c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de8:	f7fe f818 	bl	8002e1c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e187      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfa:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d036      	beq.n	8004e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1a:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <HAL_RCC_OscConfig+0x248>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fd fffc 	bl	8002e1c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e28:	f7fd fff8 	bl	8002e1c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e167      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x200>
 8004e46:	e01b      	b.n	8004e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_OscConfig+0x248>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fd ffe5 	bl	8002e1c <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e54:	e00e      	b.n	8004e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e56:	f7fd ffe1 	bl	8002e1c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d907      	bls.n	8004e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e150      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	42470000 	.word	0x42470000
 8004e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e74:	4b88      	ldr	r3, [pc, #544]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ea      	bne.n	8004e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8097 	beq.w	8004fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e92:	4b81      	ldr	r3, [pc, #516]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10f      	bne.n	8004ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	4b7d      	ldr	r3, [pc, #500]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	4a7c      	ldr	r2, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eac:	6413      	str	r3, [r2, #64]	; 0x40
 8004eae:	4b7a      	ldr	r3, [pc, #488]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebe:	4b77      	ldr	r3, [pc, #476]	; (800509c <HAL_RCC_OscConfig+0x474>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d118      	bne.n	8004efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eca:	4b74      	ldr	r3, [pc, #464]	; (800509c <HAL_RCC_OscConfig+0x474>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a73      	ldr	r2, [pc, #460]	; (800509c <HAL_RCC_OscConfig+0x474>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed6:	f7fd ffa1 	bl	8002e1c <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ede:	f7fd ff9d 	bl	8002e1c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e10c      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef0:	4b6a      	ldr	r3, [pc, #424]	; (800509c <HAL_RCC_OscConfig+0x474>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d106      	bne.n	8004f12 <HAL_RCC_OscConfig+0x2ea>
 8004f04:	4b64      	ldr	r3, [pc, #400]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	4a63      	ldr	r2, [pc, #396]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f10:	e01c      	b.n	8004f4c <HAL_RCC_OscConfig+0x324>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b05      	cmp	r3, #5
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x30c>
 8004f1a:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a5e      	ldr	r2, [pc, #376]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f20:	f043 0304 	orr.w	r3, r3, #4
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
 8004f26:	4b5c      	ldr	r3, [pc, #368]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	4a5b      	ldr	r2, [pc, #364]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6713      	str	r3, [r2, #112]	; 0x70
 8004f32:	e00b      	b.n	8004f4c <HAL_RCC_OscConfig+0x324>
 8004f34:	4b58      	ldr	r3, [pc, #352]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a57      	ldr	r2, [pc, #348]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f3a:	f023 0301 	bic.w	r3, r3, #1
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f40:	4b55      	ldr	r3, [pc, #340]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	4a54      	ldr	r2, [pc, #336]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f46:	f023 0304 	bic.w	r3, r3, #4
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fd ff62 	bl	8002e1c <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5c:	f7fd ff5e 	bl	8002e1c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0cb      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f72:	4b49      	ldr	r3, [pc, #292]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0ee      	beq.n	8004f5c <HAL_RCC_OscConfig+0x334>
 8004f7e:	e014      	b.n	8004faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f80:	f7fd ff4c 	bl	8002e1c <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f88:	f7fd ff48 	bl	8002e1c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e0b5      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1ee      	bne.n	8004f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d105      	bne.n	8004fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb0:	4b39      	ldr	r3, [pc, #228]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	4a38      	ldr	r2, [pc, #224]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80a1 	beq.w	8005108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fc6:	4b34      	ldr	r3, [pc, #208]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 030c 	and.w	r3, r3, #12
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d05c      	beq.n	800508c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d141      	bne.n	800505e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fda:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <HAL_RCC_OscConfig+0x478>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fd ff1c 	bl	8002e1c <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fd ff18 	bl	8002e1c <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e087      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	4b27      	ldr	r3, [pc, #156]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	3b01      	subs	r3, #1
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	491b      	ldr	r1, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005030:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <HAL_RCC_OscConfig+0x478>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005036:	f7fd fef1 	bl	8002e1c <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503e:	f7fd feed 	bl	8002e1c <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e05c      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x416>
 800505c:	e054      	b.n	8005108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCC_OscConfig+0x478>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fd feda 	bl	8002e1c <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506c:	f7fd fed6 	bl	8002e1c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e045      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCC_OscConfig+0x470>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x444>
 800508a:	e03d      	b.n	8005108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e038      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
 8005098:	40023800 	.word	0x40023800
 800509c:	40007000 	.word	0x40007000
 80050a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050a4:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <HAL_RCC_OscConfig+0x4ec>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d028      	beq.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050bc:	429a      	cmp	r2, r3
 80050be:	d121      	bne.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d11a      	bne.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050dc:	4293      	cmp	r3, r2
 80050de:	d111      	bne.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	3b01      	subs	r3, #1
 80050ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d107      	bne.n	8005104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800

08005118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0cc      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800512c:	4b68      	ldr	r3, [pc, #416]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d90c      	bls.n	8005154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b65      	ldr	r3, [pc, #404]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b63      	ldr	r3, [pc, #396]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0b8      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800516c:	4b59      	ldr	r3, [pc, #356]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a58      	ldr	r2, [pc, #352]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4a52      	ldr	r2, [pc, #328]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800518e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005190:	4b50      	ldr	r3, [pc, #320]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	494d      	ldr	r1, [pc, #308]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d044      	beq.n	8005238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d119      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e07f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d6:	4b3f      	ldr	r3, [pc, #252]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e06f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e6:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e067      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f6:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 0203 	bic.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4934      	ldr	r1, [pc, #208]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005208:	f7fd fe08 	bl	8002e1c <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	e00a      	b.n	8005226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005210:	f7fd fe04 	bl	8002e1c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e04f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 020c 	and.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	429a      	cmp	r2, r3
 8005236:	d1eb      	bne.n	8005210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d20c      	bcs.n	8005260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e032      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4916      	ldr	r1, [pc, #88]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	490e      	ldr	r1, [pc, #56]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800529e:	f000 f821 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	490a      	ldr	r1, [pc, #40]	; (80052d8 <HAL_RCC_ClockConfig+0x1c0>)
 80052b0:	5ccb      	ldrb	r3, [r1, r3]
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <HAL_RCC_ClockConfig+0x1c4>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HAL_RCC_ClockConfig+0x1c8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fd fd68 	bl	8002d94 <HAL_InitTick>

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40023c00 	.word	0x40023c00
 80052d4:	40023800 	.word	0x40023800
 80052d8:	08007970 	.word	0x08007970
 80052dc:	20000010 	.word	0x20000010
 80052e0:	20000014 	.word	0x20000014

080052e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e8:	b094      	sub	sp, #80	; 0x50
 80052ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	647b      	str	r3, [r7, #68]	; 0x44
 80052f0:	2300      	movs	r3, #0
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	2300      	movs	r3, #0
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052fc:	4b79      	ldr	r3, [pc, #484]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 030c 	and.w	r3, r3, #12
 8005304:	2b08      	cmp	r3, #8
 8005306:	d00d      	beq.n	8005324 <HAL_RCC_GetSysClockFreq+0x40>
 8005308:	2b08      	cmp	r3, #8
 800530a:	f200 80e1 	bhi.w	80054d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x34>
 8005312:	2b04      	cmp	r3, #4
 8005314:	d003      	beq.n	800531e <HAL_RCC_GetSysClockFreq+0x3a>
 8005316:	e0db      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005318:	4b73      	ldr	r3, [pc, #460]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800531a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800531c:	e0db      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800531e:	4b73      	ldr	r3, [pc, #460]	; (80054ec <HAL_RCC_GetSysClockFreq+0x208>)
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005322:	e0d8      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005324:	4b6f      	ldr	r3, [pc, #444]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800532c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800532e:	4b6d      	ldr	r3, [pc, #436]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d063      	beq.n	8005402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533a:	4b6a      	ldr	r3, [pc, #424]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	099b      	lsrs	r3, r3, #6
 8005340:	2200      	movs	r2, #0
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
 8005344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
 800534e:	2300      	movs	r3, #0
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
 8005352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	f04f 0000 	mov.w	r0, #0
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	0159      	lsls	r1, r3, #5
 8005364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005368:	0150      	lsls	r0, r2, #5
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4621      	mov	r1, r4
 8005370:	1a51      	subs	r1, r2, r1
 8005372:	6139      	str	r1, [r7, #16]
 8005374:	4629      	mov	r1, r5
 8005376:	eb63 0301 	sbc.w	r3, r3, r1
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005388:	4659      	mov	r1, fp
 800538a:	018b      	lsls	r3, r1, #6
 800538c:	4651      	mov	r1, sl
 800538e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005392:	4651      	mov	r1, sl
 8005394:	018a      	lsls	r2, r1, #6
 8005396:	4651      	mov	r1, sl
 8005398:	ebb2 0801 	subs.w	r8, r2, r1
 800539c:	4659      	mov	r1, fp
 800539e:	eb63 0901 	sbc.w	r9, r3, r1
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053b6:	4690      	mov	r8, r2
 80053b8:	4699      	mov	r9, r3
 80053ba:	4623      	mov	r3, r4
 80053bc:	eb18 0303 	adds.w	r3, r8, r3
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	462b      	mov	r3, r5
 80053c4:	eb49 0303 	adc.w	r3, r9, r3
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053d6:	4629      	mov	r1, r5
 80053d8:	024b      	lsls	r3, r1, #9
 80053da:	4621      	mov	r1, r4
 80053dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053e0:	4621      	mov	r1, r4
 80053e2:	024a      	lsls	r2, r1, #9
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ea:	2200      	movs	r2, #0
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053f4:	f7fb fba2 	bl	8000b3c <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4613      	mov	r3, r2
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005400:	e058      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005402:	4b38      	ldr	r3, [pc, #224]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	2200      	movs	r2, #0
 800540a:	4618      	mov	r0, r3
 800540c:	4611      	mov	r1, r2
 800540e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	2300      	movs	r3, #0
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	f04f 0000 	mov.w	r0, #0
 8005424:	f04f 0100 	mov.w	r1, #0
 8005428:	0159      	lsls	r1, r3, #5
 800542a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800542e:	0150      	lsls	r0, r2, #5
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4641      	mov	r1, r8
 8005436:	ebb2 0a01 	subs.w	sl, r2, r1
 800543a:	4649      	mov	r1, r9
 800543c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800544c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005454:	ebb2 040a 	subs.w	r4, r2, sl
 8005458:	eb63 050b 	sbc.w	r5, r3, fp
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	00eb      	lsls	r3, r5, #3
 8005466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546a:	00e2      	lsls	r2, r4, #3
 800546c:	4614      	mov	r4, r2
 800546e:	461d      	mov	r5, r3
 8005470:	4643      	mov	r3, r8
 8005472:	18e3      	adds	r3, r4, r3
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	464b      	mov	r3, r9
 8005478:	eb45 0303 	adc.w	r3, r5, r3
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548a:	4629      	mov	r1, r5
 800548c:	028b      	lsls	r3, r1, #10
 800548e:	4621      	mov	r1, r4
 8005490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005494:	4621      	mov	r1, r4
 8005496:	028a      	lsls	r2, r1, #10
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549e:	2200      	movs	r2, #0
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	61fa      	str	r2, [r7, #28]
 80054a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a8:	f7fb fb48 	bl	8000b3c <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b4:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3750      	adds	r7, #80	; 0x50
 80054dc:	46bd      	mov	sp, r7
 80054de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	007a1200 	.word	0x007a1200

080054f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000010 	.word	0x20000010

08005508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800550c:	f7ff fff0 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	; (800552c <HAL_RCC_GetPCLK1Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	08007980 	.word	0x08007980

08005530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e041      	b.n	80055c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fd f9ae 	bl	80028b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f001 f834 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d001      	beq.n	80055e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e04e      	b.n	8005686 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a23      	ldr	r2, [pc, #140]	; (8005694 <HAL_TIM_Base_Start_IT+0xc4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d022      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x80>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005612:	d01d      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x80>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <HAL_TIM_Base_Start_IT+0xc8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d018      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x80>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1e      	ldr	r2, [pc, #120]	; (800569c <HAL_TIM_Base_Start_IT+0xcc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d013      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x80>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00e      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x80>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d009      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x80>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d004      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x80>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <HAL_TIM_Base_Start_IT+0xdc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d111      	bne.n	8005674 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b06      	cmp	r3, #6
 8005660:	d010      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0201 	orr.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005672:	e007      	b.n	8005684 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40010400 	.word	0x40010400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40001800 	.word	0x40001800

080056b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10f      	bne.n	80056f8 <HAL_TIM_Base_Stop_IT+0x48>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	f240 4344 	movw	r3, #1092	; 0x444
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_Base_Stop_IT+0x48>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e041      	b.n	80057a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f839 	bl	80057ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f000 ff45 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <HAL_TIM_PWM_Start+0x24>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e022      	b.n	800582a <HAL_TIM_PWM_Start+0x6a>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d109      	bne.n	80057fe <HAL_TIM_PWM_Start+0x3e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	e015      	b.n	800582a <HAL_TIM_PWM_Start+0x6a>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d109      	bne.n	8005818 <HAL_TIM_PWM_Start+0x58>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	bf14      	ite	ne
 8005810:	2301      	movne	r3, #1
 8005812:	2300      	moveq	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e008      	b.n	800582a <HAL_TIM_PWM_Start+0x6a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e07c      	b.n	800592c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start+0x82>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005840:	e013      	b.n	800586a <HAL_TIM_PWM_Start+0xaa>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b04      	cmp	r3, #4
 8005846:	d104      	bne.n	8005852 <HAL_TIM_PWM_Start+0x92>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005850:	e00b      	b.n	800586a <HAL_TIM_PWM_Start+0xaa>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d104      	bne.n	8005862 <HAL_TIM_PWM_Start+0xa2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005860:	e003      	b.n	800586a <HAL_TIM_PWM_Start+0xaa>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f001 fac6 	bl	8006e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a2d      	ldr	r2, [pc, #180]	; (8005934 <HAL_TIM_PWM_Start+0x174>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_TIM_PWM_Start+0xcc>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <HAL_TIM_PWM_Start+0x178>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d101      	bne.n	8005890 <HAL_TIM_PWM_Start+0xd0>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_TIM_PWM_Start+0xd2>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a22      	ldr	r2, [pc, #136]	; (8005934 <HAL_TIM_PWM_Start+0x174>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x136>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d01d      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x136>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1f      	ldr	r2, [pc, #124]	; (800593c <HAL_TIM_PWM_Start+0x17c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x136>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <HAL_TIM_PWM_Start+0x180>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x136>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <HAL_TIM_PWM_Start+0x184>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x136>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <HAL_TIM_PWM_Start+0x178>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x136>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <HAL_TIM_PWM_Start+0x188>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x136>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a16      	ldr	r2, [pc, #88]	; (800594c <HAL_TIM_PWM_Start+0x18c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d111      	bne.n	800591a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b06      	cmp	r3, #6
 8005906:	d010      	beq.n	800592a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005918:	e007      	b.n	800592a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0201 	orr.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	40000c00 	.word	0x40000c00
 8005948:	40014000 	.word	0x40014000
 800594c:	40001800 	.word	0x40001800

08005950 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e041      	b.n	80059e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f839 	bl	80059ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f000 fe24 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_IC_Start_IT+0x1e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	e013      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0x46>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_IC_Start_IT+0x2e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	e00b      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0x46>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_IC_Start_IT+0x3e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	e003      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0x46>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <HAL_TIM_IC_Start_IT+0x58>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	e013      	b.n	8005a84 <HAL_TIM_IC_Start_IT+0x80>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d104      	bne.n	8005a6c <HAL_TIM_IC_Start_IT+0x68>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e00b      	b.n	8005a84 <HAL_TIM_IC_Start_IT+0x80>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d104      	bne.n	8005a7c <HAL_TIM_IC_Start_IT+0x78>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e003      	b.n	8005a84 <HAL_TIM_IC_Start_IT+0x80>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d102      	bne.n	8005a92 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a8c:	7b7b      	ldrb	r3, [r7, #13]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d001      	beq.n	8005a96 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e0cc      	b.n	8005c30 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_IC_Start_IT+0xa2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa4:	e013      	b.n	8005ace <HAL_TIM_IC_Start_IT+0xca>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_IC_Start_IT+0xb2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab4:	e00b      	b.n	8005ace <HAL_TIM_IC_Start_IT+0xca>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_IC_Start_IT+0xc2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac4:	e003      	b.n	8005ace <HAL_TIM_IC_Start_IT+0xca>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_IC_Start_IT+0xda>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005adc:	e013      	b.n	8005b06 <HAL_TIM_IC_Start_IT+0x102>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d104      	bne.n	8005aee <HAL_TIM_IC_Start_IT+0xea>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aec:	e00b      	b.n	8005b06 <HAL_TIM_IC_Start_IT+0x102>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d104      	bne.n	8005afe <HAL_TIM_IC_Start_IT+0xfa>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afc:	e003      	b.n	8005b06 <HAL_TIM_IC_Start_IT+0x102>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d841      	bhi.n	8005b90 <HAL_TIM_IC_Start_IT+0x18c>
 8005b0c:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <HAL_TIM_IC_Start_IT+0x110>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005b91 	.word	0x08005b91
 8005b1c:	08005b91 	.word	0x08005b91
 8005b20:	08005b91 	.word	0x08005b91
 8005b24:	08005b5b 	.word	0x08005b5b
 8005b28:	08005b91 	.word	0x08005b91
 8005b2c:	08005b91 	.word	0x08005b91
 8005b30:	08005b91 	.word	0x08005b91
 8005b34:	08005b6d 	.word	0x08005b6d
 8005b38:	08005b91 	.word	0x08005b91
 8005b3c:	08005b91 	.word	0x08005b91
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005b7f 	.word	0x08005b7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0202 	orr.w	r2, r2, #2
 8005b56:	60da      	str	r2, [r3, #12]
      break;
 8005b58:	e01d      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0204 	orr.w	r2, r2, #4
 8005b68:	60da      	str	r2, [r3, #12]
      break;
 8005b6a:	e014      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	60da      	str	r2, [r3, #12]
      break;
 8005b7c:	e00b      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0210 	orr.w	r2, r2, #16
 8005b8c:	60da      	str	r2, [r3, #12]
      break;
 8005b8e:	e002      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
      break;
 8005b94:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d148      	bne.n	8005c2e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 f92d 	bl	8006e04 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <HAL_TIM_IC_Start_IT+0x234>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d022      	beq.n	8005bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d01d      	beq.n	8005bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1e      	ldr	r2, [pc, #120]	; (8005c3c <HAL_TIM_IC_Start_IT+0x238>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d018      	beq.n	8005bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <HAL_TIM_IC_Start_IT+0x23c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1b      	ldr	r2, [pc, #108]	; (8005c44 <HAL_TIM_IC_Start_IT+0x240>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <HAL_TIM_IC_Start_IT+0x244>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d009      	beq.n	8005bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <HAL_TIM_IC_Start_IT+0x248>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a16      	ldr	r2, [pc, #88]	; (8005c50 <HAL_TIM_IC_Start_IT+0x24c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d111      	bne.n	8005c1e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b06      	cmp	r3, #6
 8005c0a:	d010      	beq.n	8005c2e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1c:	e007      	b.n	8005c2e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40001800 	.word	0x40001800

08005c54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e097      	b.n	8005d98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fc fedb 	bl	8002a38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c98:	f023 0307 	bic.w	r3, r3, #7
 8005c9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f000 fc97 	bl	80065dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005cf4:	f023 030c 	bic.w	r3, r3, #12
 8005cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	4313      	orrs	r3, r2
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	011a      	lsls	r2, r3, #4
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	031b      	lsls	r3, r3, #12
 8005d24:	4313      	orrs	r3, r2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	4313      	orrs	r3, r2
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005db8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d110      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d102      	bne.n	8005ddc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dd6:	7b7b      	ldrb	r3, [r7, #13]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d001      	beq.n	8005de0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e069      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df0:	e031      	b.n	8005e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d110      	bne.n	8005e1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d102      	bne.n	8005e04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dfe:	7b3b      	ldrb	r3, [r7, #12]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e055      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e18:	e01d      	b.n	8005e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d108      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d105      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e26:	7b7b      	ldrb	r3, [r7, #13]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d102      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e2c:	7b3b      	ldrb	r3, [r7, #12]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d001      	beq.n	8005e36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e03e      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_TIM_Encoder_Start+0xc4>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d008      	beq.n	8005e74 <HAL_TIM_Encoder_Start+0xd4>
 8005e62:	e00f      	b.n	8005e84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 ffc9 	bl	8006e04 <TIM_CCxChannelCmd>
      break;
 8005e72:	e016      	b.n	8005ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2104      	movs	r1, #4
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 ffc1 	bl	8006e04 <TIM_CCxChannelCmd>
      break;
 8005e82:	e00e      	b.n	8005ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 ffb9 	bl	8006e04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2201      	movs	r2, #1
 8005e98:	2104      	movs	r1, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 ffb2 	bl	8006e04 <TIM_CCxChannelCmd>
      break;
 8005ea0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d122      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d11b      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0202 	mvn.w	r2, #2
 8005ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fa ff9a 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fb4a 	bl	80065a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb51 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0204 	mvn.w	r2, #4
 8005f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fa ff70 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb20 	bl	80065a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fb27 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0208 	mvn.w	r2, #8
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2204      	movs	r2, #4
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fa ff46 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 faf6 	bl	80065a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fafd 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0210 	mvn.w	r2, #16
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fa ff1c 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 facc 	bl	80065a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fad3 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b01      	cmp	r3, #1
 8006020:	d10e      	bne.n	8006040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d107      	bne.n	8006040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0201 	mvn.w	r2, #1
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fb fe14 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d10e      	bne.n	800606c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d107      	bne.n	800606c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 ff78 	bl	8006f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d10e      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d107      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa98 	bl	80065c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d10e      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d107      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0220 	mvn.w	r2, #32
 80060bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 ff42 	bl	8006f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e088      	b.n	80061fc <HAL_TIM_IC_ConfigChannel+0x130>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11b      	bne.n	8006130 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6819      	ldr	r1, [r3, #0]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f000 fcb8 	bl	8006a7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 020c 	bic.w	r2, r2, #12
 800611a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	619a      	str	r2, [r3, #24]
 800612e:	e060      	b.n	80061f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d11c      	bne.n	8006170 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6819      	ldr	r1, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f000 fd3c 	bl	8006bc2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006158:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6999      	ldr	r1, [r3, #24]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	021a      	lsls	r2, r3, #8
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	619a      	str	r2, [r3, #24]
 800616e:	e040      	b.n	80061f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b08      	cmp	r3, #8
 8006174:	d11b      	bne.n	80061ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	6819      	ldr	r1, [r3, #0]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f000 fd89 	bl	8006c9c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 020c 	bic.w	r2, r2, #12
 8006198:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	61da      	str	r2, [r3, #28]
 80061ac:	e021      	b.n	80061f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b0c      	cmp	r3, #12
 80061b2:	d11c      	bne.n	80061ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6819      	ldr	r1, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f000 fda6 	bl	8006d14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69d9      	ldr	r1, [r3, #28]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	021a      	lsls	r2, r3, #8
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	61da      	str	r2, [r3, #28]
 80061ec:	e001      	b.n	80061f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800621e:	2302      	movs	r3, #2
 8006220:	e0ae      	b.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b0c      	cmp	r3, #12
 800622e:	f200 809f 	bhi.w	8006370 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	0800626d 	.word	0x0800626d
 800623c:	08006371 	.word	0x08006371
 8006240:	08006371 	.word	0x08006371
 8006244:	08006371 	.word	0x08006371
 8006248:	080062ad 	.word	0x080062ad
 800624c:	08006371 	.word	0x08006371
 8006250:	08006371 	.word	0x08006371
 8006254:	08006371 	.word	0x08006371
 8006258:	080062ef 	.word	0x080062ef
 800625c:	08006371 	.word	0x08006371
 8006260:	08006371 	.word	0x08006371
 8006264:	08006371 	.word	0x08006371
 8006268:	0800632f 	.word	0x0800632f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fa52 	bl	800671c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0208 	orr.w	r2, r2, #8
 8006286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0204 	bic.w	r2, r2, #4
 8006296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6999      	ldr	r1, [r3, #24]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	619a      	str	r2, [r3, #24]
      break;
 80062aa:	e064      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 faa2 	bl	80067fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6999      	ldr	r1, [r3, #24]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	619a      	str	r2, [r3, #24]
      break;
 80062ec:	e043      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 faf7 	bl	80068e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0208 	orr.w	r2, r2, #8
 8006308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0204 	bic.w	r2, r2, #4
 8006318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69d9      	ldr	r1, [r3, #28]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	61da      	str	r2, [r3, #28]
      break;
 800632c:	e023      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fb4b 	bl	80069d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69d9      	ldr	r1, [r3, #28]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	021a      	lsls	r2, r3, #8
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	61da      	str	r2, [r3, #28]
      break;
 800636e:	e002      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	75fb      	strb	r3, [r7, #23]
      break;
 8006374:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800637e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_TIM_ConfigClockSource+0x1c>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e0b4      	b.n	800650e <HAL_TIM_ConfigClockSource+0x186>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063dc:	d03e      	beq.n	800645c <HAL_TIM_ConfigClockSource+0xd4>
 80063de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e2:	f200 8087 	bhi.w	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ea:	f000 8086 	beq.w	80064fa <HAL_TIM_ConfigClockSource+0x172>
 80063ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f2:	d87f      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
 80063f4:	2b70      	cmp	r3, #112	; 0x70
 80063f6:	d01a      	beq.n	800642e <HAL_TIM_ConfigClockSource+0xa6>
 80063f8:	2b70      	cmp	r3, #112	; 0x70
 80063fa:	d87b      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
 80063fc:	2b60      	cmp	r3, #96	; 0x60
 80063fe:	d050      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x11a>
 8006400:	2b60      	cmp	r3, #96	; 0x60
 8006402:	d877      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006404:	2b50      	cmp	r3, #80	; 0x50
 8006406:	d03c      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0xfa>
 8006408:	2b50      	cmp	r3, #80	; 0x50
 800640a:	d873      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d058      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x13a>
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d86f      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d064      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006418:	2b30      	cmp	r3, #48	; 0x30
 800641a:	d86b      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d060      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d867      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d05c      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006428:	2b10      	cmp	r3, #16
 800642a:	d05a      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x15a>
 800642c:	e062      	b.n	80064f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6899      	ldr	r1, [r3, #8]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f000 fcc1 	bl	8006dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	609a      	str	r2, [r3, #8]
      break;
 800645a:	e04f      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6899      	ldr	r1, [r3, #8]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f000 fcaa 	bl	8006dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800647e:	609a      	str	r2, [r3, #8]
      break;
 8006480:	e03c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	461a      	mov	r2, r3
 8006490:	f000 fb68 	bl	8006b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2150      	movs	r1, #80	; 0x50
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fc77 	bl	8006d8e <TIM_ITRx_SetConfig>
      break;
 80064a0:	e02c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6859      	ldr	r1, [r3, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f000 fbc4 	bl	8006c3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2160      	movs	r1, #96	; 0x60
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fc67 	bl	8006d8e <TIM_ITRx_SetConfig>
      break;
 80064c0:	e01c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f000 fb48 	bl	8006b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2140      	movs	r1, #64	; 0x40
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fc57 	bl	8006d8e <TIM_ITRx_SetConfig>
      break;
 80064e0:	e00c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f000 fc4e 	bl	8006d8e <TIM_ITRx_SetConfig>
      break;
 80064f2:	e003      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
      break;
 80064f8:	e000      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b0c      	cmp	r3, #12
 800652a:	d831      	bhi.n	8006590 <HAL_TIM_ReadCapturedValue+0x78>
 800652c:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <HAL_TIM_ReadCapturedValue+0x1c>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006569 	.word	0x08006569
 8006538:	08006591 	.word	0x08006591
 800653c:	08006591 	.word	0x08006591
 8006540:	08006591 	.word	0x08006591
 8006544:	08006573 	.word	0x08006573
 8006548:	08006591 	.word	0x08006591
 800654c:	08006591 	.word	0x08006591
 8006550:	08006591 	.word	0x08006591
 8006554:	0800657d 	.word	0x0800657d
 8006558:	08006591 	.word	0x08006591
 800655c:	08006591 	.word	0x08006591
 8006560:	08006591 	.word	0x08006591
 8006564:	08006587 	.word	0x08006587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	60fb      	str	r3, [r7, #12]

      break;
 8006570:	e00f      	b.n	8006592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	60fb      	str	r3, [r7, #12]

      break;
 800657a:	e00a      	b.n	8006592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006582:	60fb      	str	r3, [r7, #12]

      break;
 8006584:	e005      	b.n	8006592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	60fb      	str	r3, [r7, #12]

      break;
 800658e:	e000      	b.n	8006592 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006590:	bf00      	nop
  }

  return tmpreg;
 8006592:	68fb      	ldr	r3, [r7, #12]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a40      	ldr	r2, [pc, #256]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d013      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fa:	d00f      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3d      	ldr	r2, [pc, #244]	; (80066f4 <TIM_Base_SetConfig+0x118>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00b      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3c      	ldr	r2, [pc, #240]	; (80066f8 <TIM_Base_SetConfig+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d007      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a3b      	ldr	r2, [pc, #236]	; (80066fc <TIM_Base_SetConfig+0x120>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a3a      	ldr	r2, [pc, #232]	; (8006700 <TIM_Base_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d108      	bne.n	800662e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2f      	ldr	r2, [pc, #188]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d02b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663c:	d027      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2c      	ldr	r2, [pc, #176]	; (80066f4 <TIM_Base_SetConfig+0x118>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d023      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <TIM_Base_SetConfig+0x11c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01f      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <TIM_Base_SetConfig+0x120>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a29      	ldr	r2, [pc, #164]	; (8006700 <TIM_Base_SetConfig+0x124>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d017      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a28      	ldr	r2, [pc, #160]	; (8006704 <TIM_Base_SetConfig+0x128>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <TIM_Base_SetConfig+0x12c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a26      	ldr	r2, [pc, #152]	; (800670c <TIM_Base_SetConfig+0x130>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a25      	ldr	r2, [pc, #148]	; (8006710 <TIM_Base_SetConfig+0x134>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a24      	ldr	r2, [pc, #144]	; (8006714 <TIM_Base_SetConfig+0x138>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a23      	ldr	r2, [pc, #140]	; (8006718 <TIM_Base_SetConfig+0x13c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0xf8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <TIM_Base_SetConfig+0x124>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d103      	bne.n	80066dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	615a      	str	r2, [r3, #20]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40010400 	.word	0x40010400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800
 8006710:	40001800 	.word	0x40001800
 8006714:	40001c00 	.word	0x40001c00
 8006718:	40002000 	.word	0x40002000

0800671c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <TIM_OC1_SetConfig+0xd8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC1_SetConfig+0x64>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1f      	ldr	r2, [pc, #124]	; (80067f8 <TIM_OC1_SetConfig+0xdc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10c      	bne.n	800679a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0308 	bic.w	r3, r3, #8
 8006786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <TIM_OC1_SetConfig+0xd8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC1_SetConfig+0x8e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <TIM_OC1_SetConfig+0xdc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d111      	bne.n	80067ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400

080067fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0210 	bic.w	r2, r3, #16
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0320 	bic.w	r3, r3, #32
 8006846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <TIM_OC2_SetConfig+0xe4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_OC2_SetConfig+0x68>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <TIM_OC2_SetConfig+0xe8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d10d      	bne.n	8006880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800686a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <TIM_OC2_SetConfig+0xe4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC2_SetConfig+0x94>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <TIM_OC2_SetConfig+0xe8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d113      	bne.n	80068b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800689e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40010400 	.word	0x40010400

080068e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <TIM_OC3_SetConfig+0xe0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC3_SetConfig+0x66>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <TIM_OC3_SetConfig+0xe4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10d      	bne.n	800696a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <TIM_OC3_SetConfig+0xe0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_OC3_SetConfig+0x92>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <TIM_OC3_SetConfig+0xe4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d113      	bne.n	80069a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	621a      	str	r2, [r3, #32]
}
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40010000 	.word	0x40010000
 80069cc:	40010400 	.word	0x40010400

080069d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <TIM_OC4_SetConfig+0xa4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC4_SetConfig+0x68>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a11      	ldr	r2, [pc, #68]	; (8006a78 <TIM_OC4_SetConfig+0xa8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d109      	bne.n	8006a4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40010400 	.word	0x40010400

08006a7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f023 0201 	bic.w	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a28      	ldr	r2, [pc, #160]	; (8006b48 <TIM_TI1_SetConfig+0xcc>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d01b      	beq.n	8006ae2 <TIM_TI1_SetConfig+0x66>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab0:	d017      	beq.n	8006ae2 <TIM_TI1_SetConfig+0x66>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <TIM_TI1_SetConfig+0xd0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <TIM_TI1_SetConfig+0x66>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a24      	ldr	r2, [pc, #144]	; (8006b50 <TIM_TI1_SetConfig+0xd4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00f      	beq.n	8006ae2 <TIM_TI1_SetConfig+0x66>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4a23      	ldr	r2, [pc, #140]	; (8006b54 <TIM_TI1_SetConfig+0xd8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00b      	beq.n	8006ae2 <TIM_TI1_SetConfig+0x66>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4a22      	ldr	r2, [pc, #136]	; (8006b58 <TIM_TI1_SetConfig+0xdc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d007      	beq.n	8006ae2 <TIM_TI1_SetConfig+0x66>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4a21      	ldr	r2, [pc, #132]	; (8006b5c <TIM_TI1_SetConfig+0xe0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_TI1_SetConfig+0x66>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <TIM_TI1_SetConfig+0xe4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d101      	bne.n	8006ae6 <TIM_TI1_SetConfig+0x6a>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <TIM_TI1_SetConfig+0x6c>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	e003      	b.n	8006b06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f023 030a 	bic.w	r3, r3, #10
 8006b20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f003 030a 	and.w	r3, r3, #10
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40000c00 	.word	0x40000c00
 8006b58:	40010400 	.word	0x40010400
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40001800 	.word	0x40001800

08006b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f023 0201 	bic.w	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 030a 	bic.w	r3, r3, #10
 8006ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b087      	sub	sp, #28
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	f023 0210 	bic.w	r2, r3, #16
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	031b      	lsls	r3, r3, #12
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f023 0210 	bic.w	r2, r3, #16
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	031b      	lsls	r3, r3, #12
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f023 0303 	bic.w	r3, r3, #3
 8006cc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006cec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	021b      	lsls	r3, r3, #8
 8006cf2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	031b      	lsls	r3, r3, #12
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	031b      	lsls	r3, r3, #12
 8006d6c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f043 0307 	orr.w	r3, r3, #7
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	609a      	str	r2, [r3, #8]
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	021a      	lsls	r2, r3, #8
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	609a      	str	r2, [r3, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	2201      	movs	r2, #1
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1a      	ldr	r2, [r3, #32]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	43db      	mvns	r3, r3
 8006e26:	401a      	ands	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f003 031f 	and.w	r3, r3, #31
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e05a      	b.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d022      	beq.n	8006ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb4:	d01d      	beq.n	8006ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d018      	beq.n	8006ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1a      	ldr	r2, [pc, #104]	; (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a18      	ldr	r2, [pc, #96]	; (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a17      	ldr	r2, [pc, #92]	; (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a15      	ldr	r2, [pc, #84]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d10c      	bne.n	8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40000400 	.word	0x40000400
 8006f34:	40000800 	.word	0x40000800
 8006f38:	40000c00 	.word	0x40000c00
 8006f3c:	40010400 	.word	0x40010400
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40001800 	.word	0x40001800

08006f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <siprintf>:
 8006f70:	b40e      	push	{r1, r2, r3}
 8006f72:	b500      	push	{lr}
 8006f74:	b09c      	sub	sp, #112	; 0x70
 8006f76:	ab1d      	add	r3, sp, #116	; 0x74
 8006f78:	9002      	str	r0, [sp, #8]
 8006f7a:	9006      	str	r0, [sp, #24]
 8006f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f80:	4809      	ldr	r0, [pc, #36]	; (8006fa8 <siprintf+0x38>)
 8006f82:	9107      	str	r1, [sp, #28]
 8006f84:	9104      	str	r1, [sp, #16]
 8006f86:	4909      	ldr	r1, [pc, #36]	; (8006fac <siprintf+0x3c>)
 8006f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8c:	9105      	str	r1, [sp, #20]
 8006f8e:	6800      	ldr	r0, [r0, #0]
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	a902      	add	r1, sp, #8
 8006f94:	f000 f992 	bl	80072bc <_svfiprintf_r>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	b01c      	add	sp, #112	; 0x70
 8006fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa4:	b003      	add	sp, #12
 8006fa6:	4770      	bx	lr
 8006fa8:	20000068 	.word	0x20000068
 8006fac:	ffff0208 	.word	0xffff0208

08006fb0 <memset>:
 8006fb0:	4402      	add	r2, r0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d100      	bne.n	8006fba <memset+0xa>
 8006fb8:	4770      	bx	lr
 8006fba:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbe:	e7f9      	b.n	8006fb4 <memset+0x4>

08006fc0 <__errno>:
 8006fc0:	4b01      	ldr	r3, [pc, #4]	; (8006fc8 <__errno+0x8>)
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20000068 	.word	0x20000068

08006fcc <__libc_init_array>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	4d0d      	ldr	r5, [pc, #52]	; (8007004 <__libc_init_array+0x38>)
 8006fd0:	4c0d      	ldr	r4, [pc, #52]	; (8007008 <__libc_init_array+0x3c>)
 8006fd2:	1b64      	subs	r4, r4, r5
 8006fd4:	10a4      	asrs	r4, r4, #2
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	42a6      	cmp	r6, r4
 8006fda:	d109      	bne.n	8006ff0 <__libc_init_array+0x24>
 8006fdc:	4d0b      	ldr	r5, [pc, #44]	; (800700c <__libc_init_array+0x40>)
 8006fde:	4c0c      	ldr	r4, [pc, #48]	; (8007010 <__libc_init_array+0x44>)
 8006fe0:	f000 fc6a 	bl	80078b8 <_init>
 8006fe4:	1b64      	subs	r4, r4, r5
 8006fe6:	10a4      	asrs	r4, r4, #2
 8006fe8:	2600      	movs	r6, #0
 8006fea:	42a6      	cmp	r6, r4
 8006fec:	d105      	bne.n	8006ffa <__libc_init_array+0x2e>
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff4:	4798      	blx	r3
 8006ff6:	3601      	adds	r6, #1
 8006ff8:	e7ee      	b.n	8006fd8 <__libc_init_array+0xc>
 8006ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffe:	4798      	blx	r3
 8007000:	3601      	adds	r6, #1
 8007002:	e7f2      	b.n	8006fea <__libc_init_array+0x1e>
 8007004:	080079cc 	.word	0x080079cc
 8007008:	080079cc 	.word	0x080079cc
 800700c:	080079cc 	.word	0x080079cc
 8007010:	080079d0 	.word	0x080079d0

08007014 <__retarget_lock_acquire_recursive>:
 8007014:	4770      	bx	lr

08007016 <__retarget_lock_release_recursive>:
 8007016:	4770      	bx	lr

08007018 <_free_r>:
 8007018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800701a:	2900      	cmp	r1, #0
 800701c:	d044      	beq.n	80070a8 <_free_r+0x90>
 800701e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007022:	9001      	str	r0, [sp, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f1a1 0404 	sub.w	r4, r1, #4
 800702a:	bfb8      	it	lt
 800702c:	18e4      	addlt	r4, r4, r3
 800702e:	f000 f8df 	bl	80071f0 <__malloc_lock>
 8007032:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <_free_r+0x94>)
 8007034:	9801      	ldr	r0, [sp, #4]
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	b933      	cbnz	r3, 8007048 <_free_r+0x30>
 800703a:	6063      	str	r3, [r4, #4]
 800703c:	6014      	str	r4, [r2, #0]
 800703e:	b003      	add	sp, #12
 8007040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007044:	f000 b8da 	b.w	80071fc <__malloc_unlock>
 8007048:	42a3      	cmp	r3, r4
 800704a:	d908      	bls.n	800705e <_free_r+0x46>
 800704c:	6825      	ldr	r5, [r4, #0]
 800704e:	1961      	adds	r1, r4, r5
 8007050:	428b      	cmp	r3, r1
 8007052:	bf01      	itttt	eq
 8007054:	6819      	ldreq	r1, [r3, #0]
 8007056:	685b      	ldreq	r3, [r3, #4]
 8007058:	1949      	addeq	r1, r1, r5
 800705a:	6021      	streq	r1, [r4, #0]
 800705c:	e7ed      	b.n	800703a <_free_r+0x22>
 800705e:	461a      	mov	r2, r3
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	b10b      	cbz	r3, 8007068 <_free_r+0x50>
 8007064:	42a3      	cmp	r3, r4
 8007066:	d9fa      	bls.n	800705e <_free_r+0x46>
 8007068:	6811      	ldr	r1, [r2, #0]
 800706a:	1855      	adds	r5, r2, r1
 800706c:	42a5      	cmp	r5, r4
 800706e:	d10b      	bne.n	8007088 <_free_r+0x70>
 8007070:	6824      	ldr	r4, [r4, #0]
 8007072:	4421      	add	r1, r4
 8007074:	1854      	adds	r4, r2, r1
 8007076:	42a3      	cmp	r3, r4
 8007078:	6011      	str	r1, [r2, #0]
 800707a:	d1e0      	bne.n	800703e <_free_r+0x26>
 800707c:	681c      	ldr	r4, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	6053      	str	r3, [r2, #4]
 8007082:	440c      	add	r4, r1
 8007084:	6014      	str	r4, [r2, #0]
 8007086:	e7da      	b.n	800703e <_free_r+0x26>
 8007088:	d902      	bls.n	8007090 <_free_r+0x78>
 800708a:	230c      	movs	r3, #12
 800708c:	6003      	str	r3, [r0, #0]
 800708e:	e7d6      	b.n	800703e <_free_r+0x26>
 8007090:	6825      	ldr	r5, [r4, #0]
 8007092:	1961      	adds	r1, r4, r5
 8007094:	428b      	cmp	r3, r1
 8007096:	bf04      	itt	eq
 8007098:	6819      	ldreq	r1, [r3, #0]
 800709a:	685b      	ldreq	r3, [r3, #4]
 800709c:	6063      	str	r3, [r4, #4]
 800709e:	bf04      	itt	eq
 80070a0:	1949      	addeq	r1, r1, r5
 80070a2:	6021      	streq	r1, [r4, #0]
 80070a4:	6054      	str	r4, [r2, #4]
 80070a6:	e7ca      	b.n	800703e <_free_r+0x26>
 80070a8:	b003      	add	sp, #12
 80070aa:	bd30      	pop	{r4, r5, pc}
 80070ac:	200004cc 	.word	0x200004cc

080070b0 <sbrk_aligned>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4e0e      	ldr	r6, [pc, #56]	; (80070ec <sbrk_aligned+0x3c>)
 80070b4:	460c      	mov	r4, r1
 80070b6:	6831      	ldr	r1, [r6, #0]
 80070b8:	4605      	mov	r5, r0
 80070ba:	b911      	cbnz	r1, 80070c2 <sbrk_aligned+0x12>
 80070bc:	f000 fba6 	bl	800780c <_sbrk_r>
 80070c0:	6030      	str	r0, [r6, #0]
 80070c2:	4621      	mov	r1, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 fba1 	bl	800780c <_sbrk_r>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	d00a      	beq.n	80070e4 <sbrk_aligned+0x34>
 80070ce:	1cc4      	adds	r4, r0, #3
 80070d0:	f024 0403 	bic.w	r4, r4, #3
 80070d4:	42a0      	cmp	r0, r4
 80070d6:	d007      	beq.n	80070e8 <sbrk_aligned+0x38>
 80070d8:	1a21      	subs	r1, r4, r0
 80070da:	4628      	mov	r0, r5
 80070dc:	f000 fb96 	bl	800780c <_sbrk_r>
 80070e0:	3001      	adds	r0, #1
 80070e2:	d101      	bne.n	80070e8 <sbrk_aligned+0x38>
 80070e4:	f04f 34ff 	mov.w	r4, #4294967295
 80070e8:	4620      	mov	r0, r4
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	200004d0 	.word	0x200004d0

080070f0 <_malloc_r>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	1ccd      	adds	r5, r1, #3
 80070f6:	f025 0503 	bic.w	r5, r5, #3
 80070fa:	3508      	adds	r5, #8
 80070fc:	2d0c      	cmp	r5, #12
 80070fe:	bf38      	it	cc
 8007100:	250c      	movcc	r5, #12
 8007102:	2d00      	cmp	r5, #0
 8007104:	4607      	mov	r7, r0
 8007106:	db01      	blt.n	800710c <_malloc_r+0x1c>
 8007108:	42a9      	cmp	r1, r5
 800710a:	d905      	bls.n	8007118 <_malloc_r+0x28>
 800710c:	230c      	movs	r3, #12
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	2600      	movs	r6, #0
 8007112:	4630      	mov	r0, r6
 8007114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007118:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071ec <_malloc_r+0xfc>
 800711c:	f000 f868 	bl	80071f0 <__malloc_lock>
 8007120:	f8d8 3000 	ldr.w	r3, [r8]
 8007124:	461c      	mov	r4, r3
 8007126:	bb5c      	cbnz	r4, 8007180 <_malloc_r+0x90>
 8007128:	4629      	mov	r1, r5
 800712a:	4638      	mov	r0, r7
 800712c:	f7ff ffc0 	bl	80070b0 <sbrk_aligned>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	4604      	mov	r4, r0
 8007134:	d155      	bne.n	80071e2 <_malloc_r+0xf2>
 8007136:	f8d8 4000 	ldr.w	r4, [r8]
 800713a:	4626      	mov	r6, r4
 800713c:	2e00      	cmp	r6, #0
 800713e:	d145      	bne.n	80071cc <_malloc_r+0xdc>
 8007140:	2c00      	cmp	r4, #0
 8007142:	d048      	beq.n	80071d6 <_malloc_r+0xe6>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	4631      	mov	r1, r6
 8007148:	4638      	mov	r0, r7
 800714a:	eb04 0903 	add.w	r9, r4, r3
 800714e:	f000 fb5d 	bl	800780c <_sbrk_r>
 8007152:	4581      	cmp	r9, r0
 8007154:	d13f      	bne.n	80071d6 <_malloc_r+0xe6>
 8007156:	6821      	ldr	r1, [r4, #0]
 8007158:	1a6d      	subs	r5, r5, r1
 800715a:	4629      	mov	r1, r5
 800715c:	4638      	mov	r0, r7
 800715e:	f7ff ffa7 	bl	80070b0 <sbrk_aligned>
 8007162:	3001      	adds	r0, #1
 8007164:	d037      	beq.n	80071d6 <_malloc_r+0xe6>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	442b      	add	r3, r5
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	f8d8 3000 	ldr.w	r3, [r8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d038      	beq.n	80071e6 <_malloc_r+0xf6>
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	42a2      	cmp	r2, r4
 8007178:	d12b      	bne.n	80071d2 <_malloc_r+0xe2>
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
 800717e:	e00f      	b.n	80071a0 <_malloc_r+0xb0>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	1b52      	subs	r2, r2, r5
 8007184:	d41f      	bmi.n	80071c6 <_malloc_r+0xd6>
 8007186:	2a0b      	cmp	r2, #11
 8007188:	d917      	bls.n	80071ba <_malloc_r+0xca>
 800718a:	1961      	adds	r1, r4, r5
 800718c:	42a3      	cmp	r3, r4
 800718e:	6025      	str	r5, [r4, #0]
 8007190:	bf18      	it	ne
 8007192:	6059      	strne	r1, [r3, #4]
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	bf08      	it	eq
 8007198:	f8c8 1000 	streq.w	r1, [r8]
 800719c:	5162      	str	r2, [r4, r5]
 800719e:	604b      	str	r3, [r1, #4]
 80071a0:	4638      	mov	r0, r7
 80071a2:	f104 060b 	add.w	r6, r4, #11
 80071a6:	f000 f829 	bl	80071fc <__malloc_unlock>
 80071aa:	f026 0607 	bic.w	r6, r6, #7
 80071ae:	1d23      	adds	r3, r4, #4
 80071b0:	1af2      	subs	r2, r6, r3
 80071b2:	d0ae      	beq.n	8007112 <_malloc_r+0x22>
 80071b4:	1b9b      	subs	r3, r3, r6
 80071b6:	50a3      	str	r3, [r4, r2]
 80071b8:	e7ab      	b.n	8007112 <_malloc_r+0x22>
 80071ba:	42a3      	cmp	r3, r4
 80071bc:	6862      	ldr	r2, [r4, #4]
 80071be:	d1dd      	bne.n	800717c <_malloc_r+0x8c>
 80071c0:	f8c8 2000 	str.w	r2, [r8]
 80071c4:	e7ec      	b.n	80071a0 <_malloc_r+0xb0>
 80071c6:	4623      	mov	r3, r4
 80071c8:	6864      	ldr	r4, [r4, #4]
 80071ca:	e7ac      	b.n	8007126 <_malloc_r+0x36>
 80071cc:	4634      	mov	r4, r6
 80071ce:	6876      	ldr	r6, [r6, #4]
 80071d0:	e7b4      	b.n	800713c <_malloc_r+0x4c>
 80071d2:	4613      	mov	r3, r2
 80071d4:	e7cc      	b.n	8007170 <_malloc_r+0x80>
 80071d6:	230c      	movs	r3, #12
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	4638      	mov	r0, r7
 80071dc:	f000 f80e 	bl	80071fc <__malloc_unlock>
 80071e0:	e797      	b.n	8007112 <_malloc_r+0x22>
 80071e2:	6025      	str	r5, [r4, #0]
 80071e4:	e7dc      	b.n	80071a0 <_malloc_r+0xb0>
 80071e6:	605b      	str	r3, [r3, #4]
 80071e8:	deff      	udf	#255	; 0xff
 80071ea:	bf00      	nop
 80071ec:	200004cc 	.word	0x200004cc

080071f0 <__malloc_lock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	; (80071f8 <__malloc_lock+0x8>)
 80071f2:	f7ff bf0f 	b.w	8007014 <__retarget_lock_acquire_recursive>
 80071f6:	bf00      	nop
 80071f8:	200004c8 	.word	0x200004c8

080071fc <__malloc_unlock>:
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <__malloc_unlock+0x8>)
 80071fe:	f7ff bf0a 	b.w	8007016 <__retarget_lock_release_recursive>
 8007202:	bf00      	nop
 8007204:	200004c8 	.word	0x200004c8

08007208 <__ssputs_r>:
 8007208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800720c:	688e      	ldr	r6, [r1, #8]
 800720e:	461f      	mov	r7, r3
 8007210:	42be      	cmp	r6, r7
 8007212:	680b      	ldr	r3, [r1, #0]
 8007214:	4682      	mov	sl, r0
 8007216:	460c      	mov	r4, r1
 8007218:	4690      	mov	r8, r2
 800721a:	d82c      	bhi.n	8007276 <__ssputs_r+0x6e>
 800721c:	898a      	ldrh	r2, [r1, #12]
 800721e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007222:	d026      	beq.n	8007272 <__ssputs_r+0x6a>
 8007224:	6965      	ldr	r5, [r4, #20]
 8007226:	6909      	ldr	r1, [r1, #16]
 8007228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800722c:	eba3 0901 	sub.w	r9, r3, r1
 8007230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007234:	1c7b      	adds	r3, r7, #1
 8007236:	444b      	add	r3, r9
 8007238:	106d      	asrs	r5, r5, #1
 800723a:	429d      	cmp	r5, r3
 800723c:	bf38      	it	cc
 800723e:	461d      	movcc	r5, r3
 8007240:	0553      	lsls	r3, r2, #21
 8007242:	d527      	bpl.n	8007294 <__ssputs_r+0x8c>
 8007244:	4629      	mov	r1, r5
 8007246:	f7ff ff53 	bl	80070f0 <_malloc_r>
 800724a:	4606      	mov	r6, r0
 800724c:	b360      	cbz	r0, 80072a8 <__ssputs_r+0xa0>
 800724e:	6921      	ldr	r1, [r4, #16]
 8007250:	464a      	mov	r2, r9
 8007252:	f000 faeb 	bl	800782c <memcpy>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800725c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	6126      	str	r6, [r4, #16]
 8007264:	6165      	str	r5, [r4, #20]
 8007266:	444e      	add	r6, r9
 8007268:	eba5 0509 	sub.w	r5, r5, r9
 800726c:	6026      	str	r6, [r4, #0]
 800726e:	60a5      	str	r5, [r4, #8]
 8007270:	463e      	mov	r6, r7
 8007272:	42be      	cmp	r6, r7
 8007274:	d900      	bls.n	8007278 <__ssputs_r+0x70>
 8007276:	463e      	mov	r6, r7
 8007278:	6820      	ldr	r0, [r4, #0]
 800727a:	4632      	mov	r2, r6
 800727c:	4641      	mov	r1, r8
 800727e:	f000 faab 	bl	80077d8 <memmove>
 8007282:	68a3      	ldr	r3, [r4, #8]
 8007284:	1b9b      	subs	r3, r3, r6
 8007286:	60a3      	str	r3, [r4, #8]
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	4433      	add	r3, r6
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	2000      	movs	r0, #0
 8007290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007294:	462a      	mov	r2, r5
 8007296:	f000 fad7 	bl	8007848 <_realloc_r>
 800729a:	4606      	mov	r6, r0
 800729c:	2800      	cmp	r0, #0
 800729e:	d1e0      	bne.n	8007262 <__ssputs_r+0x5a>
 80072a0:	6921      	ldr	r1, [r4, #16]
 80072a2:	4650      	mov	r0, sl
 80072a4:	f7ff feb8 	bl	8007018 <_free_r>
 80072a8:	230c      	movs	r3, #12
 80072aa:	f8ca 3000 	str.w	r3, [sl]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ba:	e7e9      	b.n	8007290 <__ssputs_r+0x88>

080072bc <_svfiprintf_r>:
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	4698      	mov	r8, r3
 80072c2:	898b      	ldrh	r3, [r1, #12]
 80072c4:	061b      	lsls	r3, r3, #24
 80072c6:	b09d      	sub	sp, #116	; 0x74
 80072c8:	4607      	mov	r7, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	4614      	mov	r4, r2
 80072ce:	d50e      	bpl.n	80072ee <_svfiprintf_r+0x32>
 80072d0:	690b      	ldr	r3, [r1, #16]
 80072d2:	b963      	cbnz	r3, 80072ee <_svfiprintf_r+0x32>
 80072d4:	2140      	movs	r1, #64	; 0x40
 80072d6:	f7ff ff0b 	bl	80070f0 <_malloc_r>
 80072da:	6028      	str	r0, [r5, #0]
 80072dc:	6128      	str	r0, [r5, #16]
 80072de:	b920      	cbnz	r0, 80072ea <_svfiprintf_r+0x2e>
 80072e0:	230c      	movs	r3, #12
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	e0d0      	b.n	800748c <_svfiprintf_r+0x1d0>
 80072ea:	2340      	movs	r3, #64	; 0x40
 80072ec:	616b      	str	r3, [r5, #20]
 80072ee:	2300      	movs	r3, #0
 80072f0:	9309      	str	r3, [sp, #36]	; 0x24
 80072f2:	2320      	movs	r3, #32
 80072f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072fc:	2330      	movs	r3, #48	; 0x30
 80072fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074a4 <_svfiprintf_r+0x1e8>
 8007302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007306:	f04f 0901 	mov.w	r9, #1
 800730a:	4623      	mov	r3, r4
 800730c:	469a      	mov	sl, r3
 800730e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007312:	b10a      	cbz	r2, 8007318 <_svfiprintf_r+0x5c>
 8007314:	2a25      	cmp	r2, #37	; 0x25
 8007316:	d1f9      	bne.n	800730c <_svfiprintf_r+0x50>
 8007318:	ebba 0b04 	subs.w	fp, sl, r4
 800731c:	d00b      	beq.n	8007336 <_svfiprintf_r+0x7a>
 800731e:	465b      	mov	r3, fp
 8007320:	4622      	mov	r2, r4
 8007322:	4629      	mov	r1, r5
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff ff6f 	bl	8007208 <__ssputs_r>
 800732a:	3001      	adds	r0, #1
 800732c:	f000 80a9 	beq.w	8007482 <_svfiprintf_r+0x1c6>
 8007330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007332:	445a      	add	r2, fp
 8007334:	9209      	str	r2, [sp, #36]	; 0x24
 8007336:	f89a 3000 	ldrb.w	r3, [sl]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80a1 	beq.w	8007482 <_svfiprintf_r+0x1c6>
 8007340:	2300      	movs	r3, #0
 8007342:	f04f 32ff 	mov.w	r2, #4294967295
 8007346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800734a:	f10a 0a01 	add.w	sl, sl, #1
 800734e:	9304      	str	r3, [sp, #16]
 8007350:	9307      	str	r3, [sp, #28]
 8007352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007356:	931a      	str	r3, [sp, #104]	; 0x68
 8007358:	4654      	mov	r4, sl
 800735a:	2205      	movs	r2, #5
 800735c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007360:	4850      	ldr	r0, [pc, #320]	; (80074a4 <_svfiprintf_r+0x1e8>)
 8007362:	f7f8 ff35 	bl	80001d0 <memchr>
 8007366:	9a04      	ldr	r2, [sp, #16]
 8007368:	b9d8      	cbnz	r0, 80073a2 <_svfiprintf_r+0xe6>
 800736a:	06d0      	lsls	r0, r2, #27
 800736c:	bf44      	itt	mi
 800736e:	2320      	movmi	r3, #32
 8007370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007374:	0711      	lsls	r1, r2, #28
 8007376:	bf44      	itt	mi
 8007378:	232b      	movmi	r3, #43	; 0x2b
 800737a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800737e:	f89a 3000 	ldrb.w	r3, [sl]
 8007382:	2b2a      	cmp	r3, #42	; 0x2a
 8007384:	d015      	beq.n	80073b2 <_svfiprintf_r+0xf6>
 8007386:	9a07      	ldr	r2, [sp, #28]
 8007388:	4654      	mov	r4, sl
 800738a:	2000      	movs	r0, #0
 800738c:	f04f 0c0a 	mov.w	ip, #10
 8007390:	4621      	mov	r1, r4
 8007392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007396:	3b30      	subs	r3, #48	; 0x30
 8007398:	2b09      	cmp	r3, #9
 800739a:	d94d      	bls.n	8007438 <_svfiprintf_r+0x17c>
 800739c:	b1b0      	cbz	r0, 80073cc <_svfiprintf_r+0x110>
 800739e:	9207      	str	r2, [sp, #28]
 80073a0:	e014      	b.n	80073cc <_svfiprintf_r+0x110>
 80073a2:	eba0 0308 	sub.w	r3, r0, r8
 80073a6:	fa09 f303 	lsl.w	r3, r9, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	46a2      	mov	sl, r4
 80073b0:	e7d2      	b.n	8007358 <_svfiprintf_r+0x9c>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	1d19      	adds	r1, r3, #4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	9103      	str	r1, [sp, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bfbb      	ittet	lt
 80073be:	425b      	neglt	r3, r3
 80073c0:	f042 0202 	orrlt.w	r2, r2, #2
 80073c4:	9307      	strge	r3, [sp, #28]
 80073c6:	9307      	strlt	r3, [sp, #28]
 80073c8:	bfb8      	it	lt
 80073ca:	9204      	strlt	r2, [sp, #16]
 80073cc:	7823      	ldrb	r3, [r4, #0]
 80073ce:	2b2e      	cmp	r3, #46	; 0x2e
 80073d0:	d10c      	bne.n	80073ec <_svfiprintf_r+0x130>
 80073d2:	7863      	ldrb	r3, [r4, #1]
 80073d4:	2b2a      	cmp	r3, #42	; 0x2a
 80073d6:	d134      	bne.n	8007442 <_svfiprintf_r+0x186>
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	9203      	str	r2, [sp, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfb8      	it	lt
 80073e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80073e8:	3402      	adds	r4, #2
 80073ea:	9305      	str	r3, [sp, #20]
 80073ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80074b4 <_svfiprintf_r+0x1f8>
 80073f0:	7821      	ldrb	r1, [r4, #0]
 80073f2:	2203      	movs	r2, #3
 80073f4:	4650      	mov	r0, sl
 80073f6:	f7f8 feeb 	bl	80001d0 <memchr>
 80073fa:	b138      	cbz	r0, 800740c <_svfiprintf_r+0x150>
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	eba0 000a 	sub.w	r0, r0, sl
 8007402:	2240      	movs	r2, #64	; 0x40
 8007404:	4082      	lsls	r2, r0
 8007406:	4313      	orrs	r3, r2
 8007408:	3401      	adds	r4, #1
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007410:	4825      	ldr	r0, [pc, #148]	; (80074a8 <_svfiprintf_r+0x1ec>)
 8007412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007416:	2206      	movs	r2, #6
 8007418:	f7f8 feda 	bl	80001d0 <memchr>
 800741c:	2800      	cmp	r0, #0
 800741e:	d038      	beq.n	8007492 <_svfiprintf_r+0x1d6>
 8007420:	4b22      	ldr	r3, [pc, #136]	; (80074ac <_svfiprintf_r+0x1f0>)
 8007422:	bb1b      	cbnz	r3, 800746c <_svfiprintf_r+0x1b0>
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	3307      	adds	r3, #7
 8007428:	f023 0307 	bic.w	r3, r3, #7
 800742c:	3308      	adds	r3, #8
 800742e:	9303      	str	r3, [sp, #12]
 8007430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007432:	4433      	add	r3, r6
 8007434:	9309      	str	r3, [sp, #36]	; 0x24
 8007436:	e768      	b.n	800730a <_svfiprintf_r+0x4e>
 8007438:	fb0c 3202 	mla	r2, ip, r2, r3
 800743c:	460c      	mov	r4, r1
 800743e:	2001      	movs	r0, #1
 8007440:	e7a6      	b.n	8007390 <_svfiprintf_r+0xd4>
 8007442:	2300      	movs	r3, #0
 8007444:	3401      	adds	r4, #1
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	4619      	mov	r1, r3
 800744a:	f04f 0c0a 	mov.w	ip, #10
 800744e:	4620      	mov	r0, r4
 8007450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007454:	3a30      	subs	r2, #48	; 0x30
 8007456:	2a09      	cmp	r2, #9
 8007458:	d903      	bls.n	8007462 <_svfiprintf_r+0x1a6>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0c6      	beq.n	80073ec <_svfiprintf_r+0x130>
 800745e:	9105      	str	r1, [sp, #20]
 8007460:	e7c4      	b.n	80073ec <_svfiprintf_r+0x130>
 8007462:	fb0c 2101 	mla	r1, ip, r1, r2
 8007466:	4604      	mov	r4, r0
 8007468:	2301      	movs	r3, #1
 800746a:	e7f0      	b.n	800744e <_svfiprintf_r+0x192>
 800746c:	ab03      	add	r3, sp, #12
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	462a      	mov	r2, r5
 8007472:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <_svfiprintf_r+0x1f4>)
 8007474:	a904      	add	r1, sp, #16
 8007476:	4638      	mov	r0, r7
 8007478:	f3af 8000 	nop.w
 800747c:	1c42      	adds	r2, r0, #1
 800747e:	4606      	mov	r6, r0
 8007480:	d1d6      	bne.n	8007430 <_svfiprintf_r+0x174>
 8007482:	89ab      	ldrh	r3, [r5, #12]
 8007484:	065b      	lsls	r3, r3, #25
 8007486:	f53f af2d 	bmi.w	80072e4 <_svfiprintf_r+0x28>
 800748a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800748c:	b01d      	add	sp, #116	; 0x74
 800748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	ab03      	add	r3, sp, #12
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	462a      	mov	r2, r5
 8007498:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <_svfiprintf_r+0x1f4>)
 800749a:	a904      	add	r1, sp, #16
 800749c:	4638      	mov	r0, r7
 800749e:	f000 f879 	bl	8007594 <_printf_i>
 80074a2:	e7eb      	b.n	800747c <_svfiprintf_r+0x1c0>
 80074a4:	08007990 	.word	0x08007990
 80074a8:	0800799a 	.word	0x0800799a
 80074ac:	00000000 	.word	0x00000000
 80074b0:	08007209 	.word	0x08007209
 80074b4:	08007996 	.word	0x08007996

080074b8 <_printf_common>:
 80074b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074bc:	4616      	mov	r6, r2
 80074be:	4699      	mov	r9, r3
 80074c0:	688a      	ldr	r2, [r1, #8]
 80074c2:	690b      	ldr	r3, [r1, #16]
 80074c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bfb8      	it	lt
 80074cc:	4613      	movlt	r3, r2
 80074ce:	6033      	str	r3, [r6, #0]
 80074d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074d4:	4607      	mov	r7, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	b10a      	cbz	r2, 80074de <_printf_common+0x26>
 80074da:	3301      	adds	r3, #1
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	0699      	lsls	r1, r3, #26
 80074e2:	bf42      	ittt	mi
 80074e4:	6833      	ldrmi	r3, [r6, #0]
 80074e6:	3302      	addmi	r3, #2
 80074e8:	6033      	strmi	r3, [r6, #0]
 80074ea:	6825      	ldr	r5, [r4, #0]
 80074ec:	f015 0506 	ands.w	r5, r5, #6
 80074f0:	d106      	bne.n	8007500 <_printf_common+0x48>
 80074f2:	f104 0a19 	add.w	sl, r4, #25
 80074f6:	68e3      	ldr	r3, [r4, #12]
 80074f8:	6832      	ldr	r2, [r6, #0]
 80074fa:	1a9b      	subs	r3, r3, r2
 80074fc:	42ab      	cmp	r3, r5
 80074fe:	dc26      	bgt.n	800754e <_printf_common+0x96>
 8007500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007504:	1e13      	subs	r3, r2, #0
 8007506:	6822      	ldr	r2, [r4, #0]
 8007508:	bf18      	it	ne
 800750a:	2301      	movne	r3, #1
 800750c:	0692      	lsls	r2, r2, #26
 800750e:	d42b      	bmi.n	8007568 <_printf_common+0xb0>
 8007510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007514:	4649      	mov	r1, r9
 8007516:	4638      	mov	r0, r7
 8007518:	47c0      	blx	r8
 800751a:	3001      	adds	r0, #1
 800751c:	d01e      	beq.n	800755c <_printf_common+0xa4>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	6922      	ldr	r2, [r4, #16]
 8007522:	f003 0306 	and.w	r3, r3, #6
 8007526:	2b04      	cmp	r3, #4
 8007528:	bf02      	ittt	eq
 800752a:	68e5      	ldreq	r5, [r4, #12]
 800752c:	6833      	ldreq	r3, [r6, #0]
 800752e:	1aed      	subeq	r5, r5, r3
 8007530:	68a3      	ldr	r3, [r4, #8]
 8007532:	bf0c      	ite	eq
 8007534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007538:	2500      	movne	r5, #0
 800753a:	4293      	cmp	r3, r2
 800753c:	bfc4      	itt	gt
 800753e:	1a9b      	subgt	r3, r3, r2
 8007540:	18ed      	addgt	r5, r5, r3
 8007542:	2600      	movs	r6, #0
 8007544:	341a      	adds	r4, #26
 8007546:	42b5      	cmp	r5, r6
 8007548:	d11a      	bne.n	8007580 <_printf_common+0xc8>
 800754a:	2000      	movs	r0, #0
 800754c:	e008      	b.n	8007560 <_printf_common+0xa8>
 800754e:	2301      	movs	r3, #1
 8007550:	4652      	mov	r2, sl
 8007552:	4649      	mov	r1, r9
 8007554:	4638      	mov	r0, r7
 8007556:	47c0      	blx	r8
 8007558:	3001      	adds	r0, #1
 800755a:	d103      	bne.n	8007564 <_printf_common+0xac>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007564:	3501      	adds	r5, #1
 8007566:	e7c6      	b.n	80074f6 <_printf_common+0x3e>
 8007568:	18e1      	adds	r1, r4, r3
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	2030      	movs	r0, #48	; 0x30
 800756e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007572:	4422      	add	r2, r4
 8007574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800757c:	3302      	adds	r3, #2
 800757e:	e7c7      	b.n	8007510 <_printf_common+0x58>
 8007580:	2301      	movs	r3, #1
 8007582:	4622      	mov	r2, r4
 8007584:	4649      	mov	r1, r9
 8007586:	4638      	mov	r0, r7
 8007588:	47c0      	blx	r8
 800758a:	3001      	adds	r0, #1
 800758c:	d0e6      	beq.n	800755c <_printf_common+0xa4>
 800758e:	3601      	adds	r6, #1
 8007590:	e7d9      	b.n	8007546 <_printf_common+0x8e>
	...

08007594 <_printf_i>:
 8007594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	7e0f      	ldrb	r7, [r1, #24]
 800759a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800759c:	2f78      	cmp	r7, #120	; 0x78
 800759e:	4691      	mov	r9, r2
 80075a0:	4680      	mov	r8, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	469a      	mov	sl, r3
 80075a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075aa:	d807      	bhi.n	80075bc <_printf_i+0x28>
 80075ac:	2f62      	cmp	r7, #98	; 0x62
 80075ae:	d80a      	bhi.n	80075c6 <_printf_i+0x32>
 80075b0:	2f00      	cmp	r7, #0
 80075b2:	f000 80d4 	beq.w	800775e <_printf_i+0x1ca>
 80075b6:	2f58      	cmp	r7, #88	; 0x58
 80075b8:	f000 80c0 	beq.w	800773c <_printf_i+0x1a8>
 80075bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075c4:	e03a      	b.n	800763c <_printf_i+0xa8>
 80075c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ca:	2b15      	cmp	r3, #21
 80075cc:	d8f6      	bhi.n	80075bc <_printf_i+0x28>
 80075ce:	a101      	add	r1, pc, #4	; (adr r1, 80075d4 <_printf_i+0x40>)
 80075d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d4:	0800762d 	.word	0x0800762d
 80075d8:	08007641 	.word	0x08007641
 80075dc:	080075bd 	.word	0x080075bd
 80075e0:	080075bd 	.word	0x080075bd
 80075e4:	080075bd 	.word	0x080075bd
 80075e8:	080075bd 	.word	0x080075bd
 80075ec:	08007641 	.word	0x08007641
 80075f0:	080075bd 	.word	0x080075bd
 80075f4:	080075bd 	.word	0x080075bd
 80075f8:	080075bd 	.word	0x080075bd
 80075fc:	080075bd 	.word	0x080075bd
 8007600:	08007745 	.word	0x08007745
 8007604:	0800766d 	.word	0x0800766d
 8007608:	080076ff 	.word	0x080076ff
 800760c:	080075bd 	.word	0x080075bd
 8007610:	080075bd 	.word	0x080075bd
 8007614:	08007767 	.word	0x08007767
 8007618:	080075bd 	.word	0x080075bd
 800761c:	0800766d 	.word	0x0800766d
 8007620:	080075bd 	.word	0x080075bd
 8007624:	080075bd 	.word	0x080075bd
 8007628:	08007707 	.word	0x08007707
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	602a      	str	r2, [r5, #0]
 8007634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800763c:	2301      	movs	r3, #1
 800763e:	e09f      	b.n	8007780 <_printf_i+0x1ec>
 8007640:	6820      	ldr	r0, [r4, #0]
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	0607      	lsls	r7, r0, #24
 8007646:	f103 0104 	add.w	r1, r3, #4
 800764a:	6029      	str	r1, [r5, #0]
 800764c:	d501      	bpl.n	8007652 <_printf_i+0xbe>
 800764e:	681e      	ldr	r6, [r3, #0]
 8007650:	e003      	b.n	800765a <_printf_i+0xc6>
 8007652:	0646      	lsls	r6, r0, #25
 8007654:	d5fb      	bpl.n	800764e <_printf_i+0xba>
 8007656:	f9b3 6000 	ldrsh.w	r6, [r3]
 800765a:	2e00      	cmp	r6, #0
 800765c:	da03      	bge.n	8007666 <_printf_i+0xd2>
 800765e:	232d      	movs	r3, #45	; 0x2d
 8007660:	4276      	negs	r6, r6
 8007662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007666:	485a      	ldr	r0, [pc, #360]	; (80077d0 <_printf_i+0x23c>)
 8007668:	230a      	movs	r3, #10
 800766a:	e012      	b.n	8007692 <_printf_i+0xfe>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	6820      	ldr	r0, [r4, #0]
 8007670:	1d19      	adds	r1, r3, #4
 8007672:	6029      	str	r1, [r5, #0]
 8007674:	0605      	lsls	r5, r0, #24
 8007676:	d501      	bpl.n	800767c <_printf_i+0xe8>
 8007678:	681e      	ldr	r6, [r3, #0]
 800767a:	e002      	b.n	8007682 <_printf_i+0xee>
 800767c:	0641      	lsls	r1, r0, #25
 800767e:	d5fb      	bpl.n	8007678 <_printf_i+0xe4>
 8007680:	881e      	ldrh	r6, [r3, #0]
 8007682:	4853      	ldr	r0, [pc, #332]	; (80077d0 <_printf_i+0x23c>)
 8007684:	2f6f      	cmp	r7, #111	; 0x6f
 8007686:	bf0c      	ite	eq
 8007688:	2308      	moveq	r3, #8
 800768a:	230a      	movne	r3, #10
 800768c:	2100      	movs	r1, #0
 800768e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007692:	6865      	ldr	r5, [r4, #4]
 8007694:	60a5      	str	r5, [r4, #8]
 8007696:	2d00      	cmp	r5, #0
 8007698:	bfa2      	ittt	ge
 800769a:	6821      	ldrge	r1, [r4, #0]
 800769c:	f021 0104 	bicge.w	r1, r1, #4
 80076a0:	6021      	strge	r1, [r4, #0]
 80076a2:	b90e      	cbnz	r6, 80076a8 <_printf_i+0x114>
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	d04b      	beq.n	8007740 <_printf_i+0x1ac>
 80076a8:	4615      	mov	r5, r2
 80076aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ae:	fb03 6711 	mls	r7, r3, r1, r6
 80076b2:	5dc7      	ldrb	r7, [r0, r7]
 80076b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076b8:	4637      	mov	r7, r6
 80076ba:	42bb      	cmp	r3, r7
 80076bc:	460e      	mov	r6, r1
 80076be:	d9f4      	bls.n	80076aa <_printf_i+0x116>
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d10b      	bne.n	80076dc <_printf_i+0x148>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	07de      	lsls	r6, r3, #31
 80076c8:	d508      	bpl.n	80076dc <_printf_i+0x148>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	6861      	ldr	r1, [r4, #4]
 80076ce:	4299      	cmp	r1, r3
 80076d0:	bfde      	ittt	le
 80076d2:	2330      	movle	r3, #48	; 0x30
 80076d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076dc:	1b52      	subs	r2, r2, r5
 80076de:	6122      	str	r2, [r4, #16]
 80076e0:	f8cd a000 	str.w	sl, [sp]
 80076e4:	464b      	mov	r3, r9
 80076e6:	aa03      	add	r2, sp, #12
 80076e8:	4621      	mov	r1, r4
 80076ea:	4640      	mov	r0, r8
 80076ec:	f7ff fee4 	bl	80074b8 <_printf_common>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d14a      	bne.n	800778a <_printf_i+0x1f6>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	b004      	add	sp, #16
 80076fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	f043 0320 	orr.w	r3, r3, #32
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	4833      	ldr	r0, [pc, #204]	; (80077d4 <_printf_i+0x240>)
 8007708:	2778      	movs	r7, #120	; 0x78
 800770a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	6829      	ldr	r1, [r5, #0]
 8007712:	061f      	lsls	r7, r3, #24
 8007714:	f851 6b04 	ldr.w	r6, [r1], #4
 8007718:	d402      	bmi.n	8007720 <_printf_i+0x18c>
 800771a:	065f      	lsls	r7, r3, #25
 800771c:	bf48      	it	mi
 800771e:	b2b6      	uxthmi	r6, r6
 8007720:	07df      	lsls	r7, r3, #31
 8007722:	bf48      	it	mi
 8007724:	f043 0320 	orrmi.w	r3, r3, #32
 8007728:	6029      	str	r1, [r5, #0]
 800772a:	bf48      	it	mi
 800772c:	6023      	strmi	r3, [r4, #0]
 800772e:	b91e      	cbnz	r6, 8007738 <_printf_i+0x1a4>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	f023 0320 	bic.w	r3, r3, #32
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	2310      	movs	r3, #16
 800773a:	e7a7      	b.n	800768c <_printf_i+0xf8>
 800773c:	4824      	ldr	r0, [pc, #144]	; (80077d0 <_printf_i+0x23c>)
 800773e:	e7e4      	b.n	800770a <_printf_i+0x176>
 8007740:	4615      	mov	r5, r2
 8007742:	e7bd      	b.n	80076c0 <_printf_i+0x12c>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	6826      	ldr	r6, [r4, #0]
 8007748:	6961      	ldr	r1, [r4, #20]
 800774a:	1d18      	adds	r0, r3, #4
 800774c:	6028      	str	r0, [r5, #0]
 800774e:	0635      	lsls	r5, r6, #24
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	d501      	bpl.n	8007758 <_printf_i+0x1c4>
 8007754:	6019      	str	r1, [r3, #0]
 8007756:	e002      	b.n	800775e <_printf_i+0x1ca>
 8007758:	0670      	lsls	r0, r6, #25
 800775a:	d5fb      	bpl.n	8007754 <_printf_i+0x1c0>
 800775c:	8019      	strh	r1, [r3, #0]
 800775e:	2300      	movs	r3, #0
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	4615      	mov	r5, r2
 8007764:	e7bc      	b.n	80076e0 <_printf_i+0x14c>
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	1d1a      	adds	r2, r3, #4
 800776a:	602a      	str	r2, [r5, #0]
 800776c:	681d      	ldr	r5, [r3, #0]
 800776e:	6862      	ldr	r2, [r4, #4]
 8007770:	2100      	movs	r1, #0
 8007772:	4628      	mov	r0, r5
 8007774:	f7f8 fd2c 	bl	80001d0 <memchr>
 8007778:	b108      	cbz	r0, 800777e <_printf_i+0x1ea>
 800777a:	1b40      	subs	r0, r0, r5
 800777c:	6060      	str	r0, [r4, #4]
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	2300      	movs	r3, #0
 8007784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007788:	e7aa      	b.n	80076e0 <_printf_i+0x14c>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	462a      	mov	r2, r5
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d0ad      	beq.n	80076f4 <_printf_i+0x160>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	079b      	lsls	r3, r3, #30
 800779c:	d413      	bmi.n	80077c6 <_printf_i+0x232>
 800779e:	68e0      	ldr	r0, [r4, #12]
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	4298      	cmp	r0, r3
 80077a4:	bfb8      	it	lt
 80077a6:	4618      	movlt	r0, r3
 80077a8:	e7a6      	b.n	80076f8 <_printf_i+0x164>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4632      	mov	r2, r6
 80077ae:	4649      	mov	r1, r9
 80077b0:	4640      	mov	r0, r8
 80077b2:	47d0      	blx	sl
 80077b4:	3001      	adds	r0, #1
 80077b6:	d09d      	beq.n	80076f4 <_printf_i+0x160>
 80077b8:	3501      	adds	r5, #1
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	9903      	ldr	r1, [sp, #12]
 80077be:	1a5b      	subs	r3, r3, r1
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dcf2      	bgt.n	80077aa <_printf_i+0x216>
 80077c4:	e7eb      	b.n	800779e <_printf_i+0x20a>
 80077c6:	2500      	movs	r5, #0
 80077c8:	f104 0619 	add.w	r6, r4, #25
 80077cc:	e7f5      	b.n	80077ba <_printf_i+0x226>
 80077ce:	bf00      	nop
 80077d0:	080079a1 	.word	0x080079a1
 80077d4:	080079b2 	.word	0x080079b2

080077d8 <memmove>:
 80077d8:	4288      	cmp	r0, r1
 80077da:	b510      	push	{r4, lr}
 80077dc:	eb01 0402 	add.w	r4, r1, r2
 80077e0:	d902      	bls.n	80077e8 <memmove+0x10>
 80077e2:	4284      	cmp	r4, r0
 80077e4:	4623      	mov	r3, r4
 80077e6:	d807      	bhi.n	80077f8 <memmove+0x20>
 80077e8:	1e43      	subs	r3, r0, #1
 80077ea:	42a1      	cmp	r1, r4
 80077ec:	d008      	beq.n	8007800 <memmove+0x28>
 80077ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077f6:	e7f8      	b.n	80077ea <memmove+0x12>
 80077f8:	4402      	add	r2, r0
 80077fa:	4601      	mov	r1, r0
 80077fc:	428a      	cmp	r2, r1
 80077fe:	d100      	bne.n	8007802 <memmove+0x2a>
 8007800:	bd10      	pop	{r4, pc}
 8007802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800780a:	e7f7      	b.n	80077fc <memmove+0x24>

0800780c <_sbrk_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d06      	ldr	r5, [pc, #24]	; (8007828 <_sbrk_r+0x1c>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	602b      	str	r3, [r5, #0]
 8007818:	f7fb fa28 	bl	8002c6c <_sbrk>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_sbrk_r+0x1a>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_sbrk_r+0x1a>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	200004c4 	.word	0x200004c4

0800782c <memcpy>:
 800782c:	440a      	add	r2, r1
 800782e:	4291      	cmp	r1, r2
 8007830:	f100 33ff 	add.w	r3, r0, #4294967295
 8007834:	d100      	bne.n	8007838 <memcpy+0xc>
 8007836:	4770      	bx	lr
 8007838:	b510      	push	{r4, lr}
 800783a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800783e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007842:	4291      	cmp	r1, r2
 8007844:	d1f9      	bne.n	800783a <memcpy+0xe>
 8007846:	bd10      	pop	{r4, pc}

08007848 <_realloc_r>:
 8007848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	4680      	mov	r8, r0
 800784e:	4614      	mov	r4, r2
 8007850:	460e      	mov	r6, r1
 8007852:	b921      	cbnz	r1, 800785e <_realloc_r+0x16>
 8007854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	4611      	mov	r1, r2
 800785a:	f7ff bc49 	b.w	80070f0 <_malloc_r>
 800785e:	b92a      	cbnz	r2, 800786c <_realloc_r+0x24>
 8007860:	f7ff fbda 	bl	8007018 <_free_r>
 8007864:	4625      	mov	r5, r4
 8007866:	4628      	mov	r0, r5
 8007868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800786c:	f000 f81b 	bl	80078a6 <_malloc_usable_size_r>
 8007870:	4284      	cmp	r4, r0
 8007872:	4607      	mov	r7, r0
 8007874:	d802      	bhi.n	800787c <_realloc_r+0x34>
 8007876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800787a:	d812      	bhi.n	80078a2 <_realloc_r+0x5a>
 800787c:	4621      	mov	r1, r4
 800787e:	4640      	mov	r0, r8
 8007880:	f7ff fc36 	bl	80070f0 <_malloc_r>
 8007884:	4605      	mov	r5, r0
 8007886:	2800      	cmp	r0, #0
 8007888:	d0ed      	beq.n	8007866 <_realloc_r+0x1e>
 800788a:	42bc      	cmp	r4, r7
 800788c:	4622      	mov	r2, r4
 800788e:	4631      	mov	r1, r6
 8007890:	bf28      	it	cs
 8007892:	463a      	movcs	r2, r7
 8007894:	f7ff ffca 	bl	800782c <memcpy>
 8007898:	4631      	mov	r1, r6
 800789a:	4640      	mov	r0, r8
 800789c:	f7ff fbbc 	bl	8007018 <_free_r>
 80078a0:	e7e1      	b.n	8007866 <_realloc_r+0x1e>
 80078a2:	4635      	mov	r5, r6
 80078a4:	e7df      	b.n	8007866 <_realloc_r+0x1e>

080078a6 <_malloc_usable_size_r>:
 80078a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078aa:	1f18      	subs	r0, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfbc      	itt	lt
 80078b0:	580b      	ldrlt	r3, [r1, r0]
 80078b2:	18c0      	addlt	r0, r0, r3
 80078b4:	4770      	bx	lr
	...

080078b8 <_init>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	bf00      	nop
 80078bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	469e      	mov	lr, r3
 80078c2:	4770      	bx	lr

080078c4 <_fini>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	bf00      	nop
 80078c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ca:	bc08      	pop	{r3}
 80078cc:	469e      	mov	lr, r3
 80078ce:	4770      	bx	lr
